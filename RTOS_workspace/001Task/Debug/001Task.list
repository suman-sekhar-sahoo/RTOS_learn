
001Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080047a4  080047a4  000147a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800480c  0800480c  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  0800480c  0800480c  0001480c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004814  08004814  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004814  08004814  00014814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004818  08004818  00014818  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800481c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e10  20000014  08004830  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012e24  08004830  00022e24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f644  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000270f  00000000  00000000  0002f688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  00031d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000dc8  00000000  00000000  00032c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f2f  00000000  00000000  00033a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000110c8  00000000  00000000  0005697f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6b12  00000000  00000000  00067a47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013e559  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003db8  00000000  00000000  0013e5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000014 	.word	0x20000014
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800478c 	.word	0x0800478c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000018 	.word	0x20000018
 800020c:	0800478c 	.word	0x0800478c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f000 fa33 	bl	8000984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f845 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 f8b1 	bl	8000688 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  Status=xTaskCreate(Task1_Handler,"Task-1",200,"Hello world Task-1" ,2,&Task1_Handle);
 8000526:	f107 0308 	add.w	r3, r7, #8
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	2302      	movs	r3, #2
 800052e:	9300      	str	r3, [sp, #0]
 8000530:	4b18      	ldr	r3, [pc, #96]	; (8000594 <main+0x80>)
 8000532:	22c8      	movs	r2, #200	; 0xc8
 8000534:	4918      	ldr	r1, [pc, #96]	; (8000598 <main+0x84>)
 8000536:	4819      	ldr	r0, [pc, #100]	; (800059c <main+0x88>)
 8000538:	f002 fb3e 	bl	8002bb8 <xTaskCreate>
 800053c:	6178      	str	r0, [r7, #20]
  configASSERT(Status==pdPASS);
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	2b01      	cmp	r3, #1
 8000542:	d00a      	beq.n	800055a <main+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000548:	f383 8811 	msr	BASEPRI, r3
 800054c:	f3bf 8f6f 	isb	sy
 8000550:	f3bf 8f4f 	dsb	sy
 8000554:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000556:	bf00      	nop
 8000558:	e7fe      	b.n	8000558 <main+0x44>
  Status=xTaskCreate(Task2_Handler,"Task-2",200,"Hello world Task-2" ,1,&Task2_Handle);
 800055a:	1d3b      	adds	r3, r7, #4
 800055c:	9301      	str	r3, [sp, #4]
 800055e:	2301      	movs	r3, #1
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <main+0x8c>)
 8000564:	22c8      	movs	r2, #200	; 0xc8
 8000566:	490f      	ldr	r1, [pc, #60]	; (80005a4 <main+0x90>)
 8000568:	480f      	ldr	r0, [pc, #60]	; (80005a8 <main+0x94>)
 800056a:	f002 fb25 	bl	8002bb8 <xTaskCreate>
 800056e:	6178      	str	r0, [r7, #20]
  configASSERT(Status==pdPASS);
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d00a      	beq.n	800058c <main+0x78>
        __asm volatile
 8000576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800057a:	f383 8811 	msr	BASEPRI, r3
 800057e:	f3bf 8f6f 	isb	sy
 8000582:	f3bf 8f4f 	dsb	sy
 8000586:	60fb      	str	r3, [r7, #12]
    }
 8000588:	bf00      	nop
 800058a:	e7fe      	b.n	800058a <main+0x76>

  //Start the Scheduler
  vTaskStartScheduler();
 800058c:	f002 fc5a 	bl	8002e44 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000590:	e7fe      	b.n	8000590 <main+0x7c>
 8000592:	bf00      	nop
 8000594:	080047a4 	.word	0x080047a4
 8000598:	080047b8 	.word	0x080047b8
 800059c:	08000785 	.word	0x08000785
 80005a0:	080047c0 	.word	0x080047c0
 80005a4:	080047d4 	.word	0x080047d4
 80005a8:	0800078f 	.word	0x0800078f

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	; 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 031c 	add.w	r3, r7, #28
 80005b6:	2234      	movs	r2, #52	; 0x34
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f004 f8de 	bl	800477c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b2a      	ldr	r3, [pc, #168]	; (8000680 <SystemClock_Config+0xd4>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	4a29      	ldr	r2, [pc, #164]	; (8000680 <SystemClock_Config+0xd4>)
 80005da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005de:	6413      	str	r3, [r2, #64]	; 0x40
 80005e0:	4b27      	ldr	r3, [pc, #156]	; (8000680 <SystemClock_Config+0xd4>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005ec:	2300      	movs	r3, #0
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	4b24      	ldr	r3, [pc, #144]	; (8000684 <SystemClock_Config+0xd8>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f8:	4a22      	ldr	r2, [pc, #136]	; (8000684 <SystemClock_Config+0xd8>)
 80005fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	4b20      	ldr	r3, [pc, #128]	; (8000684 <SystemClock_Config+0xd8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060c:	2302      	movs	r3, #2
 800060e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000614:	2310      	movs	r3, #16
 8000616:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000618:	2302      	movs	r3, #2
 800061a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800061c:	2300      	movs	r3, #0
 800061e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000620:	2310      	movs	r3, #16
 8000622:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000624:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000628:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800062a:	2304      	movs	r3, #4
 800062c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800062e:	2302      	movs	r3, #2
 8000630:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000632:	2302      	movs	r3, #2
 8000634:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	4618      	mov	r0, r3
 800063c:	f000 ffdc 	bl	80015f8 <HAL_RCC_OscConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000646:	f000 f8b9 	bl	80007bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	230f      	movs	r3, #15
 800064c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064e:	2302      	movs	r3, #2
 8000650:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000652:	2300      	movs	r3, #0
 8000654:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	2102      	movs	r1, #2
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fc5e 	bl	8000f28 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000672:	f000 f8a3 	bl	80007bc <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3750      	adds	r7, #80	; 0x50
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	; 0x28
 800068c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
 800069a:	60da      	str	r2, [r3, #12]
 800069c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	4b35      	ldr	r3, [pc, #212]	; (8000778 <MX_GPIO_Init+0xf0>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a34      	ldr	r2, [pc, #208]	; (8000778 <MX_GPIO_Init+0xf0>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b32      	ldr	r3, [pc, #200]	; (8000778 <MX_GPIO_Init+0xf0>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60fb      	str	r3, [r7, #12]
 80006be:	4b2e      	ldr	r3, [pc, #184]	; (8000778 <MX_GPIO_Init+0xf0>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a2d      	ldr	r2, [pc, #180]	; (8000778 <MX_GPIO_Init+0xf0>)
 80006c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b2b      	ldr	r3, [pc, #172]	; (8000778 <MX_GPIO_Init+0xf0>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	4b27      	ldr	r3, [pc, #156]	; (8000778 <MX_GPIO_Init+0xf0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a26      	ldr	r2, [pc, #152]	; (8000778 <MX_GPIO_Init+0xf0>)
 80006e0:	f043 0301 	orr.w	r3, r3, #1
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b24      	ldr	r3, [pc, #144]	; (8000778 <MX_GPIO_Init+0xf0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0301 	and.w	r3, r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	4b20      	ldr	r3, [pc, #128]	; (8000778 <MX_GPIO_Init+0xf0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a1f      	ldr	r2, [pc, #124]	; (8000778 <MX_GPIO_Init+0xf0>)
 80006fc:	f043 0302 	orr.w	r3, r3, #2
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <MX_GPIO_Init+0xf0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0302 	and.w	r3, r3, #2
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	2120      	movs	r1, #32
 8000712:	481a      	ldr	r0, [pc, #104]	; (800077c <MX_GPIO_Init+0xf4>)
 8000714:	f000 fbee 	bl	8000ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000718:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800071c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800071e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000728:	f107 0314 	add.w	r3, r7, #20
 800072c:	4619      	mov	r1, r3
 800072e:	4814      	ldr	r0, [pc, #80]	; (8000780 <MX_GPIO_Init+0xf8>)
 8000730:	f000 fa4c 	bl	8000bcc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000734:	230c      	movs	r3, #12
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000738:	2302      	movs	r3, #2
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000740:	2303      	movs	r3, #3
 8000742:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000744:	2307      	movs	r3, #7
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4619      	mov	r1, r3
 800074e:	480b      	ldr	r0, [pc, #44]	; (800077c <MX_GPIO_Init+0xf4>)
 8000750:	f000 fa3c 	bl	8000bcc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000754:	2320      	movs	r3, #32
 8000756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000758:	2301      	movs	r3, #1
 800075a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_GPIO_Init+0xf4>)
 800076c:	f000 fa2e 	bl	8000bcc <HAL_GPIO_Init>

}
 8000770:	bf00      	nop
 8000772:	3728      	adds	r7, #40	; 0x28
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800
 800077c:	40020000 	.word	0x40020000
 8000780:	40020800 	.word	0x40020800

08000784 <Task1_Handler>:

/* USER CODE BEGIN 4 */
static void Task1_Handler(void *parameter)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	while(1)
 800078c:	e7fe      	b.n	800078c <Task1_Handler+0x8>

0800078e <Task2_Handler>:

	}

}
static void Task2_Handler(void *parameter)
{
 800078e:	b480      	push	{r7}
 8000790:	b083      	sub	sp, #12
 8000792:	af00      	add	r7, sp, #0
 8000794:	6078      	str	r0, [r7, #4]
	while(1)
 8000796:	e7fe      	b.n	8000796 <Task2_Handler+0x8>

08000798 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d101      	bne.n	80007ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007aa:	f000 f90d 	bl	80009c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ae:	bf00      	nop
 80007b0:	3708      	adds	r7, #8
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40001000 	.word	0x40001000

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	e7fe      	b.n	80007c4 <Error_Handler+0x8>
	...

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b10      	ldr	r3, [pc, #64]	; (8000814 <HAL_MspInit+0x4c>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007d6:	4a0f      	ldr	r2, [pc, #60]	; (8000814 <HAL_MspInit+0x4c>)
 80007d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007dc:	6453      	str	r3, [r2, #68]	; 0x44
 80007de:	4b0d      	ldr	r3, [pc, #52]	; (8000814 <HAL_MspInit+0x4c>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <HAL_MspInit+0x4c>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	4a08      	ldr	r2, [pc, #32]	; (8000814 <HAL_MspInit+0x4c>)
 80007f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f8:	6413      	str	r3, [r2, #64]	; 0x40
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <HAL_MspInit+0x4c>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40023800 	.word	0x40023800

08000818 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08c      	sub	sp, #48	; 0x30
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000824:	2300      	movs	r3, #0
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000828:	2200      	movs	r2, #0
 800082a:	6879      	ldr	r1, [r7, #4]
 800082c:	2036      	movs	r0, #54	; 0x36
 800082e:	f000 f9a3 	bl	8000b78 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000832:	2036      	movs	r0, #54	; 0x36
 8000834:	f000 f9bc 	bl	8000bb0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	4b1f      	ldr	r3, [pc, #124]	; (80008bc <HAL_InitTick+0xa4>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	4a1e      	ldr	r2, [pc, #120]	; (80008bc <HAL_InitTick+0xa4>)
 8000842:	f043 0310 	orr.w	r3, r3, #16
 8000846:	6413      	str	r3, [r2, #64]	; 0x40
 8000848:	4b1c      	ldr	r3, [pc, #112]	; (80008bc <HAL_InitTick+0xa4>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	f003 0310 	and.w	r3, r3, #16
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000854:	f107 0210 	add.w	r2, r7, #16
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4611      	mov	r1, r2
 800085e:	4618      	mov	r0, r3
 8000860:	f000 fc68 	bl	8001134 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000864:	f000 fc52 	bl	800110c <HAL_RCC_GetPCLK1Freq>
 8000868:	4603      	mov	r3, r0
 800086a:	005b      	lsls	r3, r3, #1
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800086e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000870:	4a13      	ldr	r2, [pc, #76]	; (80008c0 <HAL_InitTick+0xa8>)
 8000872:	fba2 2303 	umull	r2, r3, r2, r3
 8000876:	0c9b      	lsrs	r3, r3, #18
 8000878:	3b01      	subs	r3, #1
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <HAL_InitTick+0xac>)
 800087e:	4a12      	ldr	r2, [pc, #72]	; (80008c8 <HAL_InitTick+0xb0>)
 8000880:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000882:	4b10      	ldr	r3, [pc, #64]	; (80008c4 <HAL_InitTick+0xac>)
 8000884:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000888:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800088a:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <HAL_InitTick+0xac>)
 800088c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800088e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <HAL_InitTick+0xac>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <HAL_InitTick+0xac>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800089c:	4809      	ldr	r0, [pc, #36]	; (80008c4 <HAL_InitTick+0xac>)
 800089e:	f001 f949 	bl	8001b34 <HAL_TIM_Base_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d104      	bne.n	80008b2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80008a8:	4806      	ldr	r0, [pc, #24]	; (80008c4 <HAL_InitTick+0xac>)
 80008aa:	f001 f99d 	bl	8001be8 <HAL_TIM_Base_Start_IT>
 80008ae:	4603      	mov	r3, r0
 80008b0:	e000      	b.n	80008b4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3730      	adds	r7, #48	; 0x30
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	40023800 	.word	0x40023800
 80008c0:	431bde83 	.word	0x431bde83
 80008c4:	20000030 	.word	0x20000030
 80008c8:	40001000 	.word	0x40001000

080008cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <NMI_Handler+0x4>

080008d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <HardFault_Handler+0x4>

080008d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <MemManage_Handler+0x4>

080008de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008fc:	4802      	ldr	r0, [pc, #8]	; (8000908 <TIM6_DAC_IRQHandler+0x10>)
 80008fe:	f001 f9e3 	bl	8001cc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000030 	.word	0x20000030

0800090c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <SystemInit+0x20>)
 8000912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000916:	4a05      	ldr	r2, [pc, #20]	; (800092c <SystemInit+0x20>)
 8000918:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800091c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000968 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000934:	480d      	ldr	r0, [pc, #52]	; (800096c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000936:	490e      	ldr	r1, [pc, #56]	; (8000970 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000938:	4a0e      	ldr	r2, [pc, #56]	; (8000974 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800093c:	e002      	b.n	8000944 <LoopCopyDataInit>

0800093e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800093e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000940:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000942:	3304      	adds	r3, #4

08000944 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000944:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000946:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000948:	d3f9      	bcc.n	800093e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094a:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800094c:	4c0b      	ldr	r4, [pc, #44]	; (800097c <LoopFillZerobss+0x26>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000950:	e001      	b.n	8000956 <LoopFillZerobss>

08000952 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000952:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000954:	3204      	adds	r2, #4

08000956 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000956:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000958:	d3fb      	bcc.n	8000952 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800095a:	f7ff ffd7 	bl	800090c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800095e:	f003 fedb 	bl	8004718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000962:	f7ff fdd7 	bl	8000514 <main>
  bx  lr    
 8000966:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000968:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000970:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000974:	0800481c 	.word	0x0800481c
  ldr r2, =_sbss
 8000978:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800097c:	20012e24 	.word	0x20012e24

08000980 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000980:	e7fe      	b.n	8000980 <ADC_IRQHandler>
	...

08000984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000988:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <HAL_Init+0x40>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <HAL_Init+0x40>)
 800098e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000992:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000994:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <HAL_Init+0x40>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <HAL_Init+0x40>)
 800099a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800099e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a0:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <HAL_Init+0x40>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a07      	ldr	r2, [pc, #28]	; (80009c4 <HAL_Init+0x40>)
 80009a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ac:	2003      	movs	r0, #3
 80009ae:	f000 f8d8 	bl	8000b62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff ff30 	bl	8000818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b8:	f7ff ff06 	bl	80007c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023c00 	.word	0x40023c00

080009c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009cc:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_IncTick+0x20>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	461a      	mov	r2, r3
 80009d2:	4b06      	ldr	r3, [pc, #24]	; (80009ec <HAL_IncTick+0x24>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4413      	add	r3, r2
 80009d8:	4a04      	ldr	r2, [pc, #16]	; (80009ec <HAL_IncTick+0x24>)
 80009da:	6013      	str	r3, [r2, #0]
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	20000008 	.word	0x20000008
 80009ec:	20000078 	.word	0x20000078

080009f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  return uwTick;
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <HAL_GetTick+0x14>)
 80009f6:	681b      	ldr	r3, [r3, #0]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	20000078 	.word	0x20000078

08000a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <__NVIC_SetPriorityGrouping+0x44>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a24:	4013      	ands	r3, r2
 8000a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3a:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <__NVIC_SetPriorityGrouping+0x44>)
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	60d3      	str	r3, [r2, #12]
}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <__NVIC_GetPriorityGrouping+0x18>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	0a1b      	lsrs	r3, r3, #8
 8000a5a:	f003 0307 	and.w	r3, r3, #7
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	db0b      	blt.n	8000a96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	f003 021f 	and.w	r2, r3, #31
 8000a84:	4907      	ldr	r1, [pc, #28]	; (8000aa4 <__NVIC_EnableIRQ+0x38>)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	095b      	lsrs	r3, r3, #5
 8000a8c:	2001      	movs	r0, #1
 8000a8e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a96:	bf00      	nop
 8000a98:	370c      	adds	r7, #12
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	e000e100 	.word	0xe000e100

08000aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	6039      	str	r1, [r7, #0]
 8000ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	db0a      	blt.n	8000ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	b2da      	uxtb	r2, r3
 8000ac0:	490c      	ldr	r1, [pc, #48]	; (8000af4 <__NVIC_SetPriority+0x4c>)
 8000ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac6:	0112      	lsls	r2, r2, #4
 8000ac8:	b2d2      	uxtb	r2, r2
 8000aca:	440b      	add	r3, r1
 8000acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ad0:	e00a      	b.n	8000ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	4908      	ldr	r1, [pc, #32]	; (8000af8 <__NVIC_SetPriority+0x50>)
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	f003 030f 	and.w	r3, r3, #15
 8000ade:	3b04      	subs	r3, #4
 8000ae0:	0112      	lsls	r2, r2, #4
 8000ae2:	b2d2      	uxtb	r2, r2
 8000ae4:	440b      	add	r3, r1
 8000ae6:	761a      	strb	r2, [r3, #24]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000e100 	.word	0xe000e100
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b089      	sub	sp, #36	; 0x24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	f1c3 0307 	rsb	r3, r3, #7
 8000b16:	2b04      	cmp	r3, #4
 8000b18:	bf28      	it	cs
 8000b1a:	2304      	movcs	r3, #4
 8000b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b1e:	69fb      	ldr	r3, [r7, #28]
 8000b20:	3304      	adds	r3, #4
 8000b22:	2b06      	cmp	r3, #6
 8000b24:	d902      	bls.n	8000b2c <NVIC_EncodePriority+0x30>
 8000b26:	69fb      	ldr	r3, [r7, #28]
 8000b28:	3b03      	subs	r3, #3
 8000b2a:	e000      	b.n	8000b2e <NVIC_EncodePriority+0x32>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	f04f 32ff 	mov.w	r2, #4294967295
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	fa02 f303 	lsl.w	r3, r2, r3
 8000b3a:	43da      	mvns	r2, r3
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	401a      	ands	r2, r3
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b44:	f04f 31ff 	mov.w	r1, #4294967295
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b4e:	43d9      	mvns	r1, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	4313      	orrs	r3, r2
         );
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3724      	adds	r7, #36	; 0x24
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ff4c 	bl	8000a08 <__NVIC_SetPriorityGrouping>
}
 8000b70:	bf00      	nop
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
 8000b84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b8a:	f7ff ff61 	bl	8000a50 <__NVIC_GetPriorityGrouping>
 8000b8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	68b9      	ldr	r1, [r7, #8]
 8000b94:	6978      	ldr	r0, [r7, #20]
 8000b96:	f7ff ffb1 	bl	8000afc <NVIC_EncodePriority>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f7ff ff80 	bl	8000aa8 <__NVIC_SetPriority>
}
 8000ba8:	bf00      	nop
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f7ff ff54 	bl	8000a6c <__NVIC_EnableIRQ>
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b089      	sub	sp, #36	; 0x24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
 8000be6:	e165      	b.n	8000eb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000be8:	2201      	movs	r2, #1
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	697a      	ldr	r2, [r7, #20]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	429a      	cmp	r2, r3
 8000c02:	f040 8154 	bne.w	8000eae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f003 0303 	and.w	r3, r3, #3
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d005      	beq.n	8000c1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d130      	bne.n	8000c80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	689b      	ldr	r3, [r3, #8]
 8000c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c24:	69fb      	ldr	r3, [r7, #28]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	2203      	movs	r2, #3
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	43db      	mvns	r3, r3
 8000c30:	69ba      	ldr	r2, [r7, #24]
 8000c32:	4013      	ands	r3, r2
 8000c34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	68da      	ldr	r2, [r3, #12]
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c54:	2201      	movs	r2, #1
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	69ba      	ldr	r2, [r7, #24]
 8000c60:	4013      	ands	r3, r2
 8000c62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	091b      	lsrs	r3, r3, #4
 8000c6a:	f003 0201 	and.w	r2, r3, #1
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	fa02 f303 	lsl.w	r3, r2, r3
 8000c74:	69ba      	ldr	r2, [r7, #24]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0303 	and.w	r3, r3, #3
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	d017      	beq.n	8000cbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	2203      	movs	r2, #3
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	43db      	mvns	r3, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	689a      	ldr	r2, [r3, #8]
 8000ca8:	69fb      	ldr	r3, [r7, #28]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	69ba      	ldr	r2, [r7, #24]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d123      	bne.n	8000d10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	08da      	lsrs	r2, r3, #3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3208      	adds	r2, #8
 8000cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	f003 0307 	and.w	r3, r3, #7
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	220f      	movs	r2, #15
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	691a      	ldr	r2, [r3, #16]
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	009b      	lsls	r3, r3, #2
 8000cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	08da      	lsrs	r2, r3, #3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	3208      	adds	r2, #8
 8000d0a:	69b9      	ldr	r1, [r7, #24]
 8000d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	2203      	movs	r2, #3
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	43db      	mvns	r3, r3
 8000d22:	69ba      	ldr	r2, [r7, #24]
 8000d24:	4013      	ands	r3, r2
 8000d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f003 0203 	and.w	r2, r3, #3
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	f000 80ae 	beq.w	8000eae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b5d      	ldr	r3, [pc, #372]	; (8000ecc <HAL_GPIO_Init+0x300>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5a:	4a5c      	ldr	r2, [pc, #368]	; (8000ecc <HAL_GPIO_Init+0x300>)
 8000d5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d60:	6453      	str	r3, [r2, #68]	; 0x44
 8000d62:	4b5a      	ldr	r3, [pc, #360]	; (8000ecc <HAL_GPIO_Init+0x300>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d6e:	4a58      	ldr	r2, [pc, #352]	; (8000ed0 <HAL_GPIO_Init+0x304>)
 8000d70:	69fb      	ldr	r3, [r7, #28]
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	3302      	adds	r3, #2
 8000d76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f003 0303 	and.w	r3, r3, #3
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	220f      	movs	r2, #15
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a4f      	ldr	r2, [pc, #316]	; (8000ed4 <HAL_GPIO_Init+0x308>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d025      	beq.n	8000de6 <HAL_GPIO_Init+0x21a>
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a4e      	ldr	r2, [pc, #312]	; (8000ed8 <HAL_GPIO_Init+0x30c>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d01f      	beq.n	8000de2 <HAL_GPIO_Init+0x216>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a4d      	ldr	r2, [pc, #308]	; (8000edc <HAL_GPIO_Init+0x310>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d019      	beq.n	8000dde <HAL_GPIO_Init+0x212>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a4c      	ldr	r2, [pc, #304]	; (8000ee0 <HAL_GPIO_Init+0x314>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d013      	beq.n	8000dda <HAL_GPIO_Init+0x20e>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a4b      	ldr	r2, [pc, #300]	; (8000ee4 <HAL_GPIO_Init+0x318>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d00d      	beq.n	8000dd6 <HAL_GPIO_Init+0x20a>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a4a      	ldr	r2, [pc, #296]	; (8000ee8 <HAL_GPIO_Init+0x31c>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d007      	beq.n	8000dd2 <HAL_GPIO_Init+0x206>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a49      	ldr	r2, [pc, #292]	; (8000eec <HAL_GPIO_Init+0x320>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d101      	bne.n	8000dce <HAL_GPIO_Init+0x202>
 8000dca:	2306      	movs	r3, #6
 8000dcc:	e00c      	b.n	8000de8 <HAL_GPIO_Init+0x21c>
 8000dce:	2307      	movs	r3, #7
 8000dd0:	e00a      	b.n	8000de8 <HAL_GPIO_Init+0x21c>
 8000dd2:	2305      	movs	r3, #5
 8000dd4:	e008      	b.n	8000de8 <HAL_GPIO_Init+0x21c>
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	e006      	b.n	8000de8 <HAL_GPIO_Init+0x21c>
 8000dda:	2303      	movs	r3, #3
 8000ddc:	e004      	b.n	8000de8 <HAL_GPIO_Init+0x21c>
 8000dde:	2302      	movs	r3, #2
 8000de0:	e002      	b.n	8000de8 <HAL_GPIO_Init+0x21c>
 8000de2:	2301      	movs	r3, #1
 8000de4:	e000      	b.n	8000de8 <HAL_GPIO_Init+0x21c>
 8000de6:	2300      	movs	r3, #0
 8000de8:	69fa      	ldr	r2, [r7, #28]
 8000dea:	f002 0203 	and.w	r2, r2, #3
 8000dee:	0092      	lsls	r2, r2, #2
 8000df0:	4093      	lsls	r3, r2
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000df8:	4935      	ldr	r1, [pc, #212]	; (8000ed0 <HAL_GPIO_Init+0x304>)
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	089b      	lsrs	r3, r3, #2
 8000dfe:	3302      	adds	r3, #2
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e06:	4b3a      	ldr	r3, [pc, #232]	; (8000ef0 <HAL_GPIO_Init+0x324>)
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4013      	ands	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e2a:	4a31      	ldr	r2, [pc, #196]	; (8000ef0 <HAL_GPIO_Init+0x324>)
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e30:	4b2f      	ldr	r3, [pc, #188]	; (8000ef0 <HAL_GPIO_Init+0x324>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d003      	beq.n	8000e54 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e54:	4a26      	ldr	r2, [pc, #152]	; (8000ef0 <HAL_GPIO_Init+0x324>)
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e5a:	4b25      	ldr	r3, [pc, #148]	; (8000ef0 <HAL_GPIO_Init+0x324>)
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e7e:	4a1c      	ldr	r2, [pc, #112]	; (8000ef0 <HAL_GPIO_Init+0x324>)
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e84:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <HAL_GPIO_Init+0x324>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ea8:	4a11      	ldr	r2, [pc, #68]	; (8000ef0 <HAL_GPIO_Init+0x324>)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	61fb      	str	r3, [r7, #28]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	2b0f      	cmp	r3, #15
 8000eb8:	f67f ae96 	bls.w	8000be8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ebc:	bf00      	nop
 8000ebe:	bf00      	nop
 8000ec0:	3724      	adds	r7, #36	; 0x24
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40013800 	.word	0x40013800
 8000ed4:	40020000 	.word	0x40020000
 8000ed8:	40020400 	.word	0x40020400
 8000edc:	40020800 	.word	0x40020800
 8000ee0:	40020c00 	.word	0x40020c00
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	40021400 	.word	0x40021400
 8000eec:	40021800 	.word	0x40021800
 8000ef0:	40013c00 	.word	0x40013c00

08000ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	460b      	mov	r3, r1
 8000efe:	807b      	strh	r3, [r7, #2]
 8000f00:	4613      	mov	r3, r2
 8000f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f04:	787b      	ldrb	r3, [r7, #1]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f0a:	887a      	ldrh	r2, [r7, #2]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f10:	e003      	b.n	8000f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f12:	887b      	ldrh	r3, [r7, #2]
 8000f14:	041a      	lsls	r2, r3, #16
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	619a      	str	r2, [r3, #24]
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d101      	bne.n	8000f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e0cc      	b.n	80010d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f3c:	4b68      	ldr	r3, [pc, #416]	; (80010e0 <HAL_RCC_ClockConfig+0x1b8>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f003 030f 	and.w	r3, r3, #15
 8000f44:	683a      	ldr	r2, [r7, #0]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d90c      	bls.n	8000f64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f4a:	4b65      	ldr	r3, [pc, #404]	; (80010e0 <HAL_RCC_ClockConfig+0x1b8>)
 8000f4c:	683a      	ldr	r2, [r7, #0]
 8000f4e:	b2d2      	uxtb	r2, r2
 8000f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f52:	4b63      	ldr	r3, [pc, #396]	; (80010e0 <HAL_RCC_ClockConfig+0x1b8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 030f 	and.w	r3, r3, #15
 8000f5a:	683a      	ldr	r2, [r7, #0]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d001      	beq.n	8000f64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	e0b8      	b.n	80010d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f003 0302 	and.w	r3, r3, #2
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d020      	beq.n	8000fb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f003 0304 	and.w	r3, r3, #4
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d005      	beq.n	8000f88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f7c:	4b59      	ldr	r3, [pc, #356]	; (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f7e:	689b      	ldr	r3, [r3, #8]
 8000f80:	4a58      	ldr	r2, [pc, #352]	; (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000f86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 0308 	and.w	r3, r3, #8
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d005      	beq.n	8000fa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f94:	4b53      	ldr	r3, [pc, #332]	; (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	4a52      	ldr	r2, [pc, #328]	; (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 8000f9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000f9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fa0:	4b50      	ldr	r3, [pc, #320]	; (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	494d      	ldr	r1, [pc, #308]	; (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d044      	beq.n	8001048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d107      	bne.n	8000fd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fc6:	4b47      	ldr	r3, [pc, #284]	; (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d119      	bne.n	8001006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	e07f      	b.n	80010d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d003      	beq.n	8000fe6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000fe2:	2b03      	cmp	r3, #3
 8000fe4:	d107      	bne.n	8000ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fe6:	4b3f      	ldr	r3, [pc, #252]	; (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d109      	bne.n	8001006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e06f      	b.n	80010d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff6:	4b3b      	ldr	r3, [pc, #236]	; (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e067      	b.n	80010d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001006:	4b37      	ldr	r3, [pc, #220]	; (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f023 0203 	bic.w	r2, r3, #3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	4934      	ldr	r1, [pc, #208]	; (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001014:	4313      	orrs	r3, r2
 8001016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001018:	f7ff fcea 	bl	80009f0 <HAL_GetTick>
 800101c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800101e:	e00a      	b.n	8001036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001020:	f7ff fce6 	bl	80009f0 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	f241 3288 	movw	r2, #5000	; 0x1388
 800102e:	4293      	cmp	r3, r2
 8001030:	d901      	bls.n	8001036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e04f      	b.n	80010d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001036:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f003 020c 	and.w	r2, r3, #12
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	429a      	cmp	r2, r3
 8001046:	d1eb      	bne.n	8001020 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001048:	4b25      	ldr	r3, [pc, #148]	; (80010e0 <HAL_RCC_ClockConfig+0x1b8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 030f 	and.w	r3, r3, #15
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	429a      	cmp	r2, r3
 8001054:	d20c      	bcs.n	8001070 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001056:	4b22      	ldr	r3, [pc, #136]	; (80010e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001058:	683a      	ldr	r2, [r7, #0]
 800105a:	b2d2      	uxtb	r2, r2
 800105c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800105e:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <HAL_RCC_ClockConfig+0x1b8>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	683a      	ldr	r2, [r7, #0]
 8001068:	429a      	cmp	r2, r3
 800106a:	d001      	beq.n	8001070 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e032      	b.n	80010d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	2b00      	cmp	r3, #0
 800107a:	d008      	beq.n	800108e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800107c:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	4916      	ldr	r1, [pc, #88]	; (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 800108a:	4313      	orrs	r3, r2
 800108c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	2b00      	cmp	r3, #0
 8001098:	d009      	beq.n	80010ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800109a:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	691b      	ldr	r3, [r3, #16]
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	490e      	ldr	r1, [pc, #56]	; (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 80010aa:	4313      	orrs	r3, r2
 80010ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80010ae:	f000 f873 	bl	8001198 <HAL_RCC_GetSysClockFreq>
 80010b2:	4602      	mov	r2, r0
 80010b4:	4b0b      	ldr	r3, [pc, #44]	; (80010e4 <HAL_RCC_ClockConfig+0x1bc>)
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	091b      	lsrs	r3, r3, #4
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	490a      	ldr	r1, [pc, #40]	; (80010e8 <HAL_RCC_ClockConfig+0x1c0>)
 80010c0:	5ccb      	ldrb	r3, [r1, r3]
 80010c2:	fa22 f303 	lsr.w	r3, r2, r3
 80010c6:	4a09      	ldr	r2, [pc, #36]	; (80010ec <HAL_RCC_ClockConfig+0x1c4>)
 80010c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <HAL_RCC_ClockConfig+0x1c8>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fba2 	bl	8000818 <HAL_InitTick>

  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3710      	adds	r7, #16
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40023c00 	.word	0x40023c00
 80010e4:	40023800 	.word	0x40023800
 80010e8:	080047f4 	.word	0x080047f4
 80010ec:	20000000 	.word	0x20000000
 80010f0:	20000004 	.word	0x20000004

080010f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <HAL_RCC_GetHCLKFreq+0x14>)
 80010fa:	681b      	ldr	r3, [r3, #0]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	20000000 	.word	0x20000000

0800110c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001110:	f7ff fff0 	bl	80010f4 <HAL_RCC_GetHCLKFreq>
 8001114:	4602      	mov	r2, r0
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001118:	689b      	ldr	r3, [r3, #8]
 800111a:	0a9b      	lsrs	r3, r3, #10
 800111c:	f003 0307 	and.w	r3, r3, #7
 8001120:	4903      	ldr	r1, [pc, #12]	; (8001130 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001122:	5ccb      	ldrb	r3, [r1, r3]
 8001124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001128:	4618      	mov	r0, r3
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40023800 	.word	0x40023800
 8001130:	08004804 	.word	0x08004804

08001134 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	220f      	movs	r2, #15
 8001142:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_RCC_GetClockConfig+0x5c>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f003 0203 	and.w	r2, r3, #3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <HAL_RCC_GetClockConfig+0x5c>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <HAL_RCC_GetClockConfig+0x5c>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <HAL_RCC_GetClockConfig+0x5c>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	08db      	lsrs	r3, r3, #3
 800116e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001176:	4b07      	ldr	r3, [pc, #28]	; (8001194 <HAL_RCC_GetClockConfig+0x60>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 020f 	and.w	r2, r3, #15
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	601a      	str	r2, [r3, #0]
}
 8001182:	bf00      	nop
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	40023800 	.word	0x40023800
 8001194:	40023c00 	.word	0x40023c00

08001198 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001198:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800119c:	b0ae      	sub	sp, #184	; 0xb8
 800119e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80011ac:	2300      	movs	r3, #0
 80011ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80011b2:	2300      	movs	r3, #0
 80011b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011be:	4bcb      	ldr	r3, [pc, #812]	; (80014ec <HAL_RCC_GetSysClockFreq+0x354>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 030c 	and.w	r3, r3, #12
 80011c6:	2b0c      	cmp	r3, #12
 80011c8:	f200 8206 	bhi.w	80015d8 <HAL_RCC_GetSysClockFreq+0x440>
 80011cc:	a201      	add	r2, pc, #4	; (adr r2, 80011d4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80011ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d2:	bf00      	nop
 80011d4:	08001209 	.word	0x08001209
 80011d8:	080015d9 	.word	0x080015d9
 80011dc:	080015d9 	.word	0x080015d9
 80011e0:	080015d9 	.word	0x080015d9
 80011e4:	08001211 	.word	0x08001211
 80011e8:	080015d9 	.word	0x080015d9
 80011ec:	080015d9 	.word	0x080015d9
 80011f0:	080015d9 	.word	0x080015d9
 80011f4:	08001219 	.word	0x08001219
 80011f8:	080015d9 	.word	0x080015d9
 80011fc:	080015d9 	.word	0x080015d9
 8001200:	080015d9 	.word	0x080015d9
 8001204:	08001409 	.word	0x08001409
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001208:	4bb9      	ldr	r3, [pc, #740]	; (80014f0 <HAL_RCC_GetSysClockFreq+0x358>)
 800120a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800120e:	e1e7      	b.n	80015e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001210:	4bb8      	ldr	r3, [pc, #736]	; (80014f4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001212:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001216:	e1e3      	b.n	80015e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001218:	4bb4      	ldr	r3, [pc, #720]	; (80014ec <HAL_RCC_GetSysClockFreq+0x354>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001220:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001224:	4bb1      	ldr	r3, [pc, #708]	; (80014ec <HAL_RCC_GetSysClockFreq+0x354>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d071      	beq.n	8001314 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001230:	4bae      	ldr	r3, [pc, #696]	; (80014ec <HAL_RCC_GetSysClockFreq+0x354>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	099b      	lsrs	r3, r3, #6
 8001236:	2200      	movs	r2, #0
 8001238:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800123c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001240:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001244:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001248:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800124c:	2300      	movs	r3, #0
 800124e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001252:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001256:	4622      	mov	r2, r4
 8001258:	462b      	mov	r3, r5
 800125a:	f04f 0000 	mov.w	r0, #0
 800125e:	f04f 0100 	mov.w	r1, #0
 8001262:	0159      	lsls	r1, r3, #5
 8001264:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001268:	0150      	lsls	r0, r2, #5
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	4621      	mov	r1, r4
 8001270:	1a51      	subs	r1, r2, r1
 8001272:	6439      	str	r1, [r7, #64]	; 0x40
 8001274:	4629      	mov	r1, r5
 8001276:	eb63 0301 	sbc.w	r3, r3, r1
 800127a:	647b      	str	r3, [r7, #68]	; 0x44
 800127c:	f04f 0200 	mov.w	r2, #0
 8001280:	f04f 0300 	mov.w	r3, #0
 8001284:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001288:	4649      	mov	r1, r9
 800128a:	018b      	lsls	r3, r1, #6
 800128c:	4641      	mov	r1, r8
 800128e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001292:	4641      	mov	r1, r8
 8001294:	018a      	lsls	r2, r1, #6
 8001296:	4641      	mov	r1, r8
 8001298:	1a51      	subs	r1, r2, r1
 800129a:	63b9      	str	r1, [r7, #56]	; 0x38
 800129c:	4649      	mov	r1, r9
 800129e:	eb63 0301 	sbc.w	r3, r3, r1
 80012a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	f04f 0300 	mov.w	r3, #0
 80012ac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80012b0:	4649      	mov	r1, r9
 80012b2:	00cb      	lsls	r3, r1, #3
 80012b4:	4641      	mov	r1, r8
 80012b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80012ba:	4641      	mov	r1, r8
 80012bc:	00ca      	lsls	r2, r1, #3
 80012be:	4610      	mov	r0, r2
 80012c0:	4619      	mov	r1, r3
 80012c2:	4603      	mov	r3, r0
 80012c4:	4622      	mov	r2, r4
 80012c6:	189b      	adds	r3, r3, r2
 80012c8:	633b      	str	r3, [r7, #48]	; 0x30
 80012ca:	462b      	mov	r3, r5
 80012cc:	460a      	mov	r2, r1
 80012ce:	eb42 0303 	adc.w	r3, r2, r3
 80012d2:	637b      	str	r3, [r7, #52]	; 0x34
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	f04f 0300 	mov.w	r3, #0
 80012dc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80012e0:	4629      	mov	r1, r5
 80012e2:	024b      	lsls	r3, r1, #9
 80012e4:	4621      	mov	r1, r4
 80012e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80012ea:	4621      	mov	r1, r4
 80012ec:	024a      	lsls	r2, r1, #9
 80012ee:	4610      	mov	r0, r2
 80012f0:	4619      	mov	r1, r3
 80012f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80012f6:	2200      	movs	r2, #0
 80012f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80012fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001300:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001304:	f7fe ff84 	bl	8000210 <__aeabi_uldivmod>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4613      	mov	r3, r2
 800130e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001312:	e067      	b.n	80013e4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001314:	4b75      	ldr	r3, [pc, #468]	; (80014ec <HAL_RCC_GetSysClockFreq+0x354>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	099b      	lsrs	r3, r3, #6
 800131a:	2200      	movs	r2, #0
 800131c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001320:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001324:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001328:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800132c:	67bb      	str	r3, [r7, #120]	; 0x78
 800132e:	2300      	movs	r3, #0
 8001330:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001332:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001336:	4622      	mov	r2, r4
 8001338:	462b      	mov	r3, r5
 800133a:	f04f 0000 	mov.w	r0, #0
 800133e:	f04f 0100 	mov.w	r1, #0
 8001342:	0159      	lsls	r1, r3, #5
 8001344:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001348:	0150      	lsls	r0, r2, #5
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4621      	mov	r1, r4
 8001350:	1a51      	subs	r1, r2, r1
 8001352:	62b9      	str	r1, [r7, #40]	; 0x28
 8001354:	4629      	mov	r1, r5
 8001356:	eb63 0301 	sbc.w	r3, r3, r1
 800135a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001368:	4649      	mov	r1, r9
 800136a:	018b      	lsls	r3, r1, #6
 800136c:	4641      	mov	r1, r8
 800136e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001372:	4641      	mov	r1, r8
 8001374:	018a      	lsls	r2, r1, #6
 8001376:	4641      	mov	r1, r8
 8001378:	ebb2 0a01 	subs.w	sl, r2, r1
 800137c:	4649      	mov	r1, r9
 800137e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800138e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001392:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001396:	4692      	mov	sl, r2
 8001398:	469b      	mov	fp, r3
 800139a:	4623      	mov	r3, r4
 800139c:	eb1a 0303 	adds.w	r3, sl, r3
 80013a0:	623b      	str	r3, [r7, #32]
 80013a2:	462b      	mov	r3, r5
 80013a4:	eb4b 0303 	adc.w	r3, fp, r3
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
 80013aa:	f04f 0200 	mov.w	r2, #0
 80013ae:	f04f 0300 	mov.w	r3, #0
 80013b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80013b6:	4629      	mov	r1, r5
 80013b8:	028b      	lsls	r3, r1, #10
 80013ba:	4621      	mov	r1, r4
 80013bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80013c0:	4621      	mov	r1, r4
 80013c2:	028a      	lsls	r2, r1, #10
 80013c4:	4610      	mov	r0, r2
 80013c6:	4619      	mov	r1, r3
 80013c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80013cc:	2200      	movs	r2, #0
 80013ce:	673b      	str	r3, [r7, #112]	; 0x70
 80013d0:	677a      	str	r2, [r7, #116]	; 0x74
 80013d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80013d6:	f7fe ff1b 	bl	8000210 <__aeabi_uldivmod>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4613      	mov	r3, r2
 80013e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013e4:	4b41      	ldr	r3, [pc, #260]	; (80014ec <HAL_RCC_GetSysClockFreq+0x354>)
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	0c1b      	lsrs	r3, r3, #16
 80013ea:	f003 0303 	and.w	r3, r3, #3
 80013ee:	3301      	adds	r3, #1
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80013f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80013fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80013fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001402:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001406:	e0eb      	b.n	80015e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001408:	4b38      	ldr	r3, [pc, #224]	; (80014ec <HAL_RCC_GetSysClockFreq+0x354>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001410:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001414:	4b35      	ldr	r3, [pc, #212]	; (80014ec <HAL_RCC_GetSysClockFreq+0x354>)
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d06b      	beq.n	80014f8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001420:	4b32      	ldr	r3, [pc, #200]	; (80014ec <HAL_RCC_GetSysClockFreq+0x354>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	099b      	lsrs	r3, r3, #6
 8001426:	2200      	movs	r2, #0
 8001428:	66bb      	str	r3, [r7, #104]	; 0x68
 800142a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800142c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800142e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001432:	663b      	str	r3, [r7, #96]	; 0x60
 8001434:	2300      	movs	r3, #0
 8001436:	667b      	str	r3, [r7, #100]	; 0x64
 8001438:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800143c:	4622      	mov	r2, r4
 800143e:	462b      	mov	r3, r5
 8001440:	f04f 0000 	mov.w	r0, #0
 8001444:	f04f 0100 	mov.w	r1, #0
 8001448:	0159      	lsls	r1, r3, #5
 800144a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800144e:	0150      	lsls	r0, r2, #5
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4621      	mov	r1, r4
 8001456:	1a51      	subs	r1, r2, r1
 8001458:	61b9      	str	r1, [r7, #24]
 800145a:	4629      	mov	r1, r5
 800145c:	eb63 0301 	sbc.w	r3, r3, r1
 8001460:	61fb      	str	r3, [r7, #28]
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	f04f 0300 	mov.w	r3, #0
 800146a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800146e:	4659      	mov	r1, fp
 8001470:	018b      	lsls	r3, r1, #6
 8001472:	4651      	mov	r1, sl
 8001474:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001478:	4651      	mov	r1, sl
 800147a:	018a      	lsls	r2, r1, #6
 800147c:	4651      	mov	r1, sl
 800147e:	ebb2 0801 	subs.w	r8, r2, r1
 8001482:	4659      	mov	r1, fp
 8001484:	eb63 0901 	sbc.w	r9, r3, r1
 8001488:	f04f 0200 	mov.w	r2, #0
 800148c:	f04f 0300 	mov.w	r3, #0
 8001490:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001494:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001498:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800149c:	4690      	mov	r8, r2
 800149e:	4699      	mov	r9, r3
 80014a0:	4623      	mov	r3, r4
 80014a2:	eb18 0303 	adds.w	r3, r8, r3
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	462b      	mov	r3, r5
 80014aa:	eb49 0303 	adc.w	r3, r9, r3
 80014ae:	617b      	str	r3, [r7, #20]
 80014b0:	f04f 0200 	mov.w	r2, #0
 80014b4:	f04f 0300 	mov.w	r3, #0
 80014b8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80014bc:	4629      	mov	r1, r5
 80014be:	024b      	lsls	r3, r1, #9
 80014c0:	4621      	mov	r1, r4
 80014c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80014c6:	4621      	mov	r1, r4
 80014c8:	024a      	lsls	r2, r1, #9
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80014d2:	2200      	movs	r2, #0
 80014d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80014d6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80014d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80014dc:	f7fe fe98 	bl	8000210 <__aeabi_uldivmod>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4613      	mov	r3, r2
 80014e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80014ea:	e065      	b.n	80015b8 <HAL_RCC_GetSysClockFreq+0x420>
 80014ec:	40023800 	.word	0x40023800
 80014f0:	00f42400 	.word	0x00f42400
 80014f4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f8:	4b3d      	ldr	r3, [pc, #244]	; (80015f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	099b      	lsrs	r3, r3, #6
 80014fe:	2200      	movs	r2, #0
 8001500:	4618      	mov	r0, r3
 8001502:	4611      	mov	r1, r2
 8001504:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001508:	653b      	str	r3, [r7, #80]	; 0x50
 800150a:	2300      	movs	r3, #0
 800150c:	657b      	str	r3, [r7, #84]	; 0x54
 800150e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001512:	4642      	mov	r2, r8
 8001514:	464b      	mov	r3, r9
 8001516:	f04f 0000 	mov.w	r0, #0
 800151a:	f04f 0100 	mov.w	r1, #0
 800151e:	0159      	lsls	r1, r3, #5
 8001520:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001524:	0150      	lsls	r0, r2, #5
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4641      	mov	r1, r8
 800152c:	1a51      	subs	r1, r2, r1
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	4649      	mov	r1, r9
 8001532:	eb63 0301 	sbc.w	r3, r3, r1
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	f04f 0300 	mov.w	r3, #0
 8001540:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001544:	4659      	mov	r1, fp
 8001546:	018b      	lsls	r3, r1, #6
 8001548:	4651      	mov	r1, sl
 800154a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800154e:	4651      	mov	r1, sl
 8001550:	018a      	lsls	r2, r1, #6
 8001552:	4651      	mov	r1, sl
 8001554:	1a54      	subs	r4, r2, r1
 8001556:	4659      	mov	r1, fp
 8001558:	eb63 0501 	sbc.w	r5, r3, r1
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	f04f 0300 	mov.w	r3, #0
 8001564:	00eb      	lsls	r3, r5, #3
 8001566:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800156a:	00e2      	lsls	r2, r4, #3
 800156c:	4614      	mov	r4, r2
 800156e:	461d      	mov	r5, r3
 8001570:	4643      	mov	r3, r8
 8001572:	18e3      	adds	r3, r4, r3
 8001574:	603b      	str	r3, [r7, #0]
 8001576:	464b      	mov	r3, r9
 8001578:	eb45 0303 	adc.w	r3, r5, r3
 800157c:	607b      	str	r3, [r7, #4]
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	e9d7 4500 	ldrd	r4, r5, [r7]
 800158a:	4629      	mov	r1, r5
 800158c:	028b      	lsls	r3, r1, #10
 800158e:	4621      	mov	r1, r4
 8001590:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001594:	4621      	mov	r1, r4
 8001596:	028a      	lsls	r2, r1, #10
 8001598:	4610      	mov	r0, r2
 800159a:	4619      	mov	r1, r3
 800159c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015a0:	2200      	movs	r2, #0
 80015a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80015a4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80015a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80015aa:	f7fe fe31 	bl	8000210 <__aeabi_uldivmod>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4613      	mov	r3, r2
 80015b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80015b8:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	0f1b      	lsrs	r3, r3, #28
 80015be:	f003 0307 	and.w	r3, r3, #7
 80015c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80015c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80015ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80015ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80015d6:	e003      	b.n	80015e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80015da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80015de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80015e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	37b8      	adds	r7, #184	; 0xb8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015ee:	bf00      	nop
 80015f0:	40023800 	.word	0x40023800
 80015f4:	00f42400 	.word	0x00f42400

080015f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e28d      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0301 	and.w	r3, r3, #1
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 8083 	beq.w	800171e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001618:	4b94      	ldr	r3, [pc, #592]	; (800186c <HAL_RCC_OscConfig+0x274>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f003 030c 	and.w	r3, r3, #12
 8001620:	2b04      	cmp	r3, #4
 8001622:	d019      	beq.n	8001658 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001624:	4b91      	ldr	r3, [pc, #580]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800162c:	2b08      	cmp	r3, #8
 800162e:	d106      	bne.n	800163e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001630:	4b8e      	ldr	r3, [pc, #568]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001638:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800163c:	d00c      	beq.n	8001658 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800163e:	4b8b      	ldr	r3, [pc, #556]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001646:	2b0c      	cmp	r3, #12
 8001648:	d112      	bne.n	8001670 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800164a:	4b88      	ldr	r3, [pc, #544]	; (800186c <HAL_RCC_OscConfig+0x274>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001652:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001656:	d10b      	bne.n	8001670 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001658:	4b84      	ldr	r3, [pc, #528]	; (800186c <HAL_RCC_OscConfig+0x274>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d05b      	beq.n	800171c <HAL_RCC_OscConfig+0x124>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d157      	bne.n	800171c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e25a      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001678:	d106      	bne.n	8001688 <HAL_RCC_OscConfig+0x90>
 800167a:	4b7c      	ldr	r3, [pc, #496]	; (800186c <HAL_RCC_OscConfig+0x274>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a7b      	ldr	r2, [pc, #492]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e01d      	b.n	80016c4 <HAL_RCC_OscConfig+0xcc>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001690:	d10c      	bne.n	80016ac <HAL_RCC_OscConfig+0xb4>
 8001692:	4b76      	ldr	r3, [pc, #472]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a75      	ldr	r2, [pc, #468]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001698:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800169c:	6013      	str	r3, [r2, #0]
 800169e:	4b73      	ldr	r3, [pc, #460]	; (800186c <HAL_RCC_OscConfig+0x274>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a72      	ldr	r2, [pc, #456]	; (800186c <HAL_RCC_OscConfig+0x274>)
 80016a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016a8:	6013      	str	r3, [r2, #0]
 80016aa:	e00b      	b.n	80016c4 <HAL_RCC_OscConfig+0xcc>
 80016ac:	4b6f      	ldr	r3, [pc, #444]	; (800186c <HAL_RCC_OscConfig+0x274>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a6e      	ldr	r2, [pc, #440]	; (800186c <HAL_RCC_OscConfig+0x274>)
 80016b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b6:	6013      	str	r3, [r2, #0]
 80016b8:	4b6c      	ldr	r3, [pc, #432]	; (800186c <HAL_RCC_OscConfig+0x274>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a6b      	ldr	r2, [pc, #428]	; (800186c <HAL_RCC_OscConfig+0x274>)
 80016be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d013      	beq.n	80016f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff f990 	bl	80009f0 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff f98c 	bl	80009f0 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	; 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e21f      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	4b61      	ldr	r3, [pc, #388]	; (800186c <HAL_RCC_OscConfig+0x274>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0xdc>
 80016f2:	e014      	b.n	800171e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f4:	f7ff f97c 	bl	80009f0 <HAL_GetTick>
 80016f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016fa:	e008      	b.n	800170e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016fc:	f7ff f978 	bl	80009f0 <HAL_GetTick>
 8001700:	4602      	mov	r2, r0
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	2b64      	cmp	r3, #100	; 0x64
 8001708:	d901      	bls.n	800170e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800170a:	2303      	movs	r3, #3
 800170c:	e20b      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170e:	4b57      	ldr	r3, [pc, #348]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d1f0      	bne.n	80016fc <HAL_RCC_OscConfig+0x104>
 800171a:	e000      	b.n	800171e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800171c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d06f      	beq.n	800180a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800172a:	4b50      	ldr	r3, [pc, #320]	; (800186c <HAL_RCC_OscConfig+0x274>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f003 030c 	and.w	r3, r3, #12
 8001732:	2b00      	cmp	r3, #0
 8001734:	d017      	beq.n	8001766 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001736:	4b4d      	ldr	r3, [pc, #308]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800173e:	2b08      	cmp	r3, #8
 8001740:	d105      	bne.n	800174e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001742:	4b4a      	ldr	r3, [pc, #296]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d00b      	beq.n	8001766 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800174e:	4b47      	ldr	r3, [pc, #284]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001756:	2b0c      	cmp	r3, #12
 8001758:	d11c      	bne.n	8001794 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800175a:	4b44      	ldr	r3, [pc, #272]	; (800186c <HAL_RCC_OscConfig+0x274>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d116      	bne.n	8001794 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001766:	4b41      	ldr	r3, [pc, #260]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d005      	beq.n	800177e <HAL_RCC_OscConfig+0x186>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	68db      	ldr	r3, [r3, #12]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d001      	beq.n	800177e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e1d3      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177e:	4b3b      	ldr	r3, [pc, #236]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	4937      	ldr	r1, [pc, #220]	; (800186c <HAL_RCC_OscConfig+0x274>)
 800178e:	4313      	orrs	r3, r2
 8001790:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001792:	e03a      	b.n	800180a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	68db      	ldr	r3, [r3, #12]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d020      	beq.n	80017de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800179c:	4b34      	ldr	r3, [pc, #208]	; (8001870 <HAL_RCC_OscConfig+0x278>)
 800179e:	2201      	movs	r2, #1
 80017a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a2:	f7ff f925 	bl	80009f0 <HAL_GetTick>
 80017a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a8:	e008      	b.n	80017bc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017aa:	f7ff f921 	bl	80009f0 <HAL_GetTick>
 80017ae:	4602      	mov	r2, r0
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	1ad3      	subs	r3, r2, r3
 80017b4:	2b02      	cmp	r3, #2
 80017b6:	d901      	bls.n	80017bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80017b8:	2303      	movs	r3, #3
 80017ba:	e1b4      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017bc:	4b2b      	ldr	r3, [pc, #172]	; (800186c <HAL_RCC_OscConfig+0x274>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0f0      	beq.n	80017aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c8:	4b28      	ldr	r3, [pc, #160]	; (800186c <HAL_RCC_OscConfig+0x274>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	00db      	lsls	r3, r3, #3
 80017d6:	4925      	ldr	r1, [pc, #148]	; (800186c <HAL_RCC_OscConfig+0x274>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	600b      	str	r3, [r1, #0]
 80017dc:	e015      	b.n	800180a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017de:	4b24      	ldr	r3, [pc, #144]	; (8001870 <HAL_RCC_OscConfig+0x278>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e4:	f7ff f904 	bl	80009f0 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ec:	f7ff f900 	bl	80009f0 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e193      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fe:	4b1b      	ldr	r3, [pc, #108]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f0      	bne.n	80017ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0308 	and.w	r3, r3, #8
 8001812:	2b00      	cmp	r3, #0
 8001814:	d036      	beq.n	8001884 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d016      	beq.n	800184c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <HAL_RCC_OscConfig+0x27c>)
 8001820:	2201      	movs	r2, #1
 8001822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001824:	f7ff f8e4 	bl	80009f0 <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182a:	e008      	b.n	800183e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800182c:	f7ff f8e0 	bl	80009f0 <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d901      	bls.n	800183e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e173      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183e:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_RCC_OscConfig+0x274>)
 8001840:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d0f0      	beq.n	800182c <HAL_RCC_OscConfig+0x234>
 800184a:	e01b      	b.n	8001884 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800184c:	4b09      	ldr	r3, [pc, #36]	; (8001874 <HAL_RCC_OscConfig+0x27c>)
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001852:	f7ff f8cd 	bl	80009f0 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001858:	e00e      	b.n	8001878 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800185a:	f7ff f8c9 	bl	80009f0 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d907      	bls.n	8001878 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e15c      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
 800186c:	40023800 	.word	0x40023800
 8001870:	42470000 	.word	0x42470000
 8001874:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001878:	4b8a      	ldr	r3, [pc, #552]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 800187a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1ea      	bne.n	800185a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 8097 	beq.w	80019c0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001892:	2300      	movs	r3, #0
 8001894:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001896:	4b83      	ldr	r3, [pc, #524]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10f      	bne.n	80018c2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
 80018a6:	4b7f      	ldr	r3, [pc, #508]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	4a7e      	ldr	r2, [pc, #504]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b0:	6413      	str	r3, [r2, #64]	; 0x40
 80018b2:	4b7c      	ldr	r3, [pc, #496]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	60bb      	str	r3, [r7, #8]
 80018bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018be:	2301      	movs	r3, #1
 80018c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c2:	4b79      	ldr	r3, [pc, #484]	; (8001aa8 <HAL_RCC_OscConfig+0x4b0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d118      	bne.n	8001900 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ce:	4b76      	ldr	r3, [pc, #472]	; (8001aa8 <HAL_RCC_OscConfig+0x4b0>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a75      	ldr	r2, [pc, #468]	; (8001aa8 <HAL_RCC_OscConfig+0x4b0>)
 80018d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018da:	f7ff f889 	bl	80009f0 <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e2:	f7ff f885 	bl	80009f0 <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e118      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f4:	4b6c      	ldr	r3, [pc, #432]	; (8001aa8 <HAL_RCC_OscConfig+0x4b0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d0f0      	beq.n	80018e2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d106      	bne.n	8001916 <HAL_RCC_OscConfig+0x31e>
 8001908:	4b66      	ldr	r3, [pc, #408]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 800190a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800190c:	4a65      	ldr	r2, [pc, #404]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	6713      	str	r3, [r2, #112]	; 0x70
 8001914:	e01c      	b.n	8001950 <HAL_RCC_OscConfig+0x358>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2b05      	cmp	r3, #5
 800191c:	d10c      	bne.n	8001938 <HAL_RCC_OscConfig+0x340>
 800191e:	4b61      	ldr	r3, [pc, #388]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001922:	4a60      	ldr	r2, [pc, #384]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001924:	f043 0304 	orr.w	r3, r3, #4
 8001928:	6713      	str	r3, [r2, #112]	; 0x70
 800192a:	4b5e      	ldr	r3, [pc, #376]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 800192c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192e:	4a5d      	ldr	r2, [pc, #372]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6713      	str	r3, [r2, #112]	; 0x70
 8001936:	e00b      	b.n	8001950 <HAL_RCC_OscConfig+0x358>
 8001938:	4b5a      	ldr	r3, [pc, #360]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 800193a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800193c:	4a59      	ldr	r2, [pc, #356]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 800193e:	f023 0301 	bic.w	r3, r3, #1
 8001942:	6713      	str	r3, [r2, #112]	; 0x70
 8001944:	4b57      	ldr	r3, [pc, #348]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001946:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001948:	4a56      	ldr	r2, [pc, #344]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 800194a:	f023 0304 	bic.w	r3, r3, #4
 800194e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d015      	beq.n	8001984 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001958:	f7ff f84a 	bl	80009f0 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195e:	e00a      	b.n	8001976 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001960:	f7ff f846 	bl	80009f0 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	f241 3288 	movw	r2, #5000	; 0x1388
 800196e:	4293      	cmp	r3, r2
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e0d7      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001976:	4b4b      	ldr	r3, [pc, #300]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d0ee      	beq.n	8001960 <HAL_RCC_OscConfig+0x368>
 8001982:	e014      	b.n	80019ae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001984:	f7ff f834 	bl	80009f0 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800198a:	e00a      	b.n	80019a2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800198c:	f7ff f830 	bl	80009f0 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	f241 3288 	movw	r2, #5000	; 0x1388
 800199a:	4293      	cmp	r3, r2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e0c1      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019a2:	4b40      	ldr	r3, [pc, #256]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 80019a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1ee      	bne.n	800198c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019ae:	7dfb      	ldrb	r3, [r7, #23]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d105      	bne.n	80019c0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b4:	4b3b      	ldr	r3, [pc, #236]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 80019b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b8:	4a3a      	ldr	r2, [pc, #232]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 80019ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f000 80ad 	beq.w	8001b24 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019ca:	4b36      	ldr	r3, [pc, #216]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	2b08      	cmp	r3, #8
 80019d4:	d060      	beq.n	8001a98 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d145      	bne.n	8001a6a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019de:	4b33      	ldr	r3, [pc, #204]	; (8001aac <HAL_RCC_OscConfig+0x4b4>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e4:	f7ff f804 	bl	80009f0 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019ec:	f7ff f800 	bl	80009f0 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e093      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fe:	4b29      	ldr	r3, [pc, #164]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	69da      	ldr	r2, [r3, #28]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	431a      	orrs	r2, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a18:	019b      	lsls	r3, r3, #6
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a20:	085b      	lsrs	r3, r3, #1
 8001a22:	3b01      	subs	r3, #1
 8001a24:	041b      	lsls	r3, r3, #16
 8001a26:	431a      	orrs	r2, r3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2c:	061b      	lsls	r3, r3, #24
 8001a2e:	431a      	orrs	r2, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	071b      	lsls	r3, r3, #28
 8001a36:	491b      	ldr	r1, [pc, #108]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <HAL_RCC_OscConfig+0x4b4>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a42:	f7fe ffd5 	bl	80009f0 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a4a:	f7fe ffd1 	bl	80009f0 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e064      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x452>
 8001a68:	e05c      	b.n	8001b24 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_RCC_OscConfig+0x4b4>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a70:	f7fe ffbe 	bl	80009f0 <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a78:	f7fe ffba 	bl	80009f0 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e04d      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_RCC_OscConfig+0x4ac>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f0      	bne.n	8001a78 <HAL_RCC_OscConfig+0x480>
 8001a96:	e045      	b.n	8001b24 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d107      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	e040      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40007000 	.word	0x40007000
 8001aac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ab0:	4b1f      	ldr	r3, [pc, #124]	; (8001b30 <HAL_RCC_OscConfig+0x538>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d030      	beq.n	8001b20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d129      	bne.n	8001b20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d122      	bne.n	8001b20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ae6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d119      	bne.n	8001b20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af6:	085b      	lsrs	r3, r3, #1
 8001af8:	3b01      	subs	r3, #1
 8001afa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d10f      	bne.n	8001b20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d107      	bne.n	8001b20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800

08001b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e041      	b.n	8001bca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d106      	bne.n	8001b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f839 	bl	8001bd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2202      	movs	r2, #2
 8001b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3304      	adds	r3, #4
 8001b70:	4619      	mov	r1, r3
 8001b72:	4610      	mov	r0, r2
 8001b74:	f000 f9d8 	bl	8001f28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b085      	sub	sp, #20
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d001      	beq.n	8001c00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e04e      	b.n	8001c9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0201 	orr.w	r2, r2, #1
 8001c16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a23      	ldr	r2, [pc, #140]	; (8001cac <HAL_TIM_Base_Start_IT+0xc4>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d022      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x80>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c2a:	d01d      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x80>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a1f      	ldr	r2, [pc, #124]	; (8001cb0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d018      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x80>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a1e      	ldr	r2, [pc, #120]	; (8001cb4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d013      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x80>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a1c      	ldr	r2, [pc, #112]	; (8001cb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00e      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x80>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a1b      	ldr	r2, [pc, #108]	; (8001cbc <HAL_TIM_Base_Start_IT+0xd4>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d009      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x80>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a19      	ldr	r2, [pc, #100]	; (8001cc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d004      	beq.n	8001c68 <HAL_TIM_Base_Start_IT+0x80>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a18      	ldr	r2, [pc, #96]	; (8001cc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d111      	bne.n	8001c8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2b06      	cmp	r3, #6
 8001c78:	d010      	beq.n	8001c9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f042 0201 	orr.w	r2, r2, #1
 8001c88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c8a:	e007      	b.n	8001c9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f042 0201 	orr.w	r2, r2, #1
 8001c9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	40010000 	.word	0x40010000
 8001cb0:	40000400 	.word	0x40000400
 8001cb4:	40000800 	.word	0x40000800
 8001cb8:	40000c00 	.word	0x40000c00
 8001cbc:	40010400 	.word	0x40010400
 8001cc0:	40014000 	.word	0x40014000
 8001cc4:	40001800 	.word	0x40001800

08001cc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d122      	bne.n	8001d24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d11b      	bne.n	8001d24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f06f 0202 	mvn.w	r2, #2
 8001cf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f003 0303 	and.w	r3, r3, #3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f8ee 	bl	8001eec <HAL_TIM_IC_CaptureCallback>
 8001d10:	e005      	b.n	8001d1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f8e0 	bl	8001ed8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f8f1 	bl	8001f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d122      	bne.n	8001d78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b04      	cmp	r3, #4
 8001d3e:	d11b      	bne.n	8001d78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0204 	mvn.w	r2, #4
 8001d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f8c4 	bl	8001eec <HAL_TIM_IC_CaptureCallback>
 8001d64:	e005      	b.n	8001d72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f8b6 	bl	8001ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f8c7 	bl	8001f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d122      	bne.n	8001dcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f003 0308 	and.w	r3, r3, #8
 8001d90:	2b08      	cmp	r3, #8
 8001d92:	d11b      	bne.n	8001dcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0208 	mvn.w	r2, #8
 8001d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2204      	movs	r2, #4
 8001da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f89a 	bl	8001eec <HAL_TIM_IC_CaptureCallback>
 8001db8:	e005      	b.n	8001dc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f88c 	bl	8001ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f89d 	bl	8001f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	f003 0310 	and.w	r3, r3, #16
 8001dd6:	2b10      	cmp	r3, #16
 8001dd8:	d122      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	2b10      	cmp	r3, #16
 8001de6:	d11b      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0210 	mvn.w	r2, #16
 8001df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2208      	movs	r2, #8
 8001df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f870 	bl	8001eec <HAL_TIM_IC_CaptureCallback>
 8001e0c:	e005      	b.n	8001e1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f862 	bl	8001ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f873 	bl	8001f00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d10e      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d107      	bne.n	8001e4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0201 	mvn.w	r2, #1
 8001e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7fe fca6 	bl	8000798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e56:	2b80      	cmp	r3, #128	; 0x80
 8001e58:	d10e      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e64:	2b80      	cmp	r3, #128	; 0x80
 8001e66:	d107      	bne.n	8001e78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f902 	bl	800207c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e82:	2b40      	cmp	r3, #64	; 0x40
 8001e84:	d10e      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e90:	2b40      	cmp	r3, #64	; 0x40
 8001e92:	d107      	bne.n	8001ea4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f838 	bl	8001f14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	f003 0320 	and.w	r3, r3, #32
 8001eae:	2b20      	cmp	r3, #32
 8001eb0:	d10e      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	2b20      	cmp	r3, #32
 8001ebe:	d107      	bne.n	8001ed0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0220 	mvn.w	r2, #32
 8001ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f8cc 	bl	8002068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ee0:	bf00      	nop
 8001ee2:	370c      	adds	r7, #12
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a40      	ldr	r2, [pc, #256]	; (800203c <TIM_Base_SetConfig+0x114>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d013      	beq.n	8001f68 <TIM_Base_SetConfig+0x40>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f46:	d00f      	beq.n	8001f68 <TIM_Base_SetConfig+0x40>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a3d      	ldr	r2, [pc, #244]	; (8002040 <TIM_Base_SetConfig+0x118>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d00b      	beq.n	8001f68 <TIM_Base_SetConfig+0x40>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a3c      	ldr	r2, [pc, #240]	; (8002044 <TIM_Base_SetConfig+0x11c>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d007      	beq.n	8001f68 <TIM_Base_SetConfig+0x40>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a3b      	ldr	r2, [pc, #236]	; (8002048 <TIM_Base_SetConfig+0x120>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d003      	beq.n	8001f68 <TIM_Base_SetConfig+0x40>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a3a      	ldr	r2, [pc, #232]	; (800204c <TIM_Base_SetConfig+0x124>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d108      	bne.n	8001f7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a2f      	ldr	r2, [pc, #188]	; (800203c <TIM_Base_SetConfig+0x114>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d02b      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f88:	d027      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a2c      	ldr	r2, [pc, #176]	; (8002040 <TIM_Base_SetConfig+0x118>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d023      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a2b      	ldr	r2, [pc, #172]	; (8002044 <TIM_Base_SetConfig+0x11c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d01f      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a2a      	ldr	r2, [pc, #168]	; (8002048 <TIM_Base_SetConfig+0x120>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d01b      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a29      	ldr	r2, [pc, #164]	; (800204c <TIM_Base_SetConfig+0x124>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d017      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a28      	ldr	r2, [pc, #160]	; (8002050 <TIM_Base_SetConfig+0x128>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d013      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a27      	ldr	r2, [pc, #156]	; (8002054 <TIM_Base_SetConfig+0x12c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d00f      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a26      	ldr	r2, [pc, #152]	; (8002058 <TIM_Base_SetConfig+0x130>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d00b      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a25      	ldr	r2, [pc, #148]	; (800205c <TIM_Base_SetConfig+0x134>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d007      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a24      	ldr	r2, [pc, #144]	; (8002060 <TIM_Base_SetConfig+0x138>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d003      	beq.n	8001fda <TIM_Base_SetConfig+0xb2>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a23      	ldr	r2, [pc, #140]	; (8002064 <TIM_Base_SetConfig+0x13c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d108      	bne.n	8001fec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68fa      	ldr	r2, [r7, #12]
 8001ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	4a0a      	ldr	r2, [pc, #40]	; (800203c <TIM_Base_SetConfig+0x114>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d003      	beq.n	8002020 <TIM_Base_SetConfig+0xf8>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	4a0c      	ldr	r2, [pc, #48]	; (800204c <TIM_Base_SetConfig+0x124>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d103      	bne.n	8002028 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2201      	movs	r2, #1
 800202c:	615a      	str	r2, [r3, #20]
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40010000 	.word	0x40010000
 8002040:	40000400 	.word	0x40000400
 8002044:	40000800 	.word	0x40000800
 8002048:	40000c00 	.word	0x40000c00
 800204c:	40010400 	.word	0x40010400
 8002050:	40014000 	.word	0x40014000
 8002054:	40014400 	.word	0x40014400
 8002058:	40014800 	.word	0x40014800
 800205c:	40001800 	.word	0x40001800
 8002060:	40001c00 	.word	0x40001c00
 8002064:	40002000 	.word	0x40002000

08002068 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr

08002090 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f103 0208 	add.w	r2, r3, #8
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295
 80020a8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f103 0208 	add.w	r2, r3, #8
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f103 0208 	add.w	r2, r3, #8
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr

080020ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80020ea:	b480      	push	{r7}
 80020ec:	b085      	sub	sp, #20
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
 80020f2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	689a      	ldr	r2, [r3, #8]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	1c5a      	adds	r2, r3, #1
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	601a      	str	r2, [r3, #0]
}
 8002126:	bf00      	nop
 8002128:	3714      	adds	r7, #20
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002132:	b480      	push	{r7}
 8002134:	b085      	sub	sp, #20
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
 800213a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002148:	d103      	bne.n	8002152 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	e00c      	b.n	800216c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3308      	adds	r3, #8
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	e002      	b.n	8002160 <vListInsert+0x2e>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	429a      	cmp	r2, r3
 800216a:	d2f6      	bcs.n	800215a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	601a      	str	r2, [r3, #0]
}
 8002198:	bf00      	nop
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6892      	ldr	r2, [r2, #8]
 80021ba:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6852      	ldr	r2, [r2, #4]
 80021c4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d103      	bne.n	80021d8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	1e5a      	subs	r2, r3, #1
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10a      	bne.n	8002222 <xQueueGenericReset+0x2a>
        __asm volatile
 800220c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002210:	f383 8811 	msr	BASEPRI, r3
 8002214:	f3bf 8f6f 	isb	sy
 8002218:	f3bf 8f4f 	dsb	sy
 800221c:	60bb      	str	r3, [r7, #8]
    }
 800221e:	bf00      	nop
 8002220:	e7fe      	b.n	8002220 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002222:	f001 ff59 	bl	80040d8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222e:	68f9      	ldr	r1, [r7, #12]
 8002230:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002232:	fb01 f303 	mul.w	r3, r1, r3
 8002236:	441a      	add	r2, r3
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002252:	3b01      	subs	r3, #1
 8002254:	68f9      	ldr	r1, [r7, #12]
 8002256:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002258:	fb01 f303 	mul.w	r3, r1, r3
 800225c:	441a      	add	r2, r3
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	22ff      	movs	r2, #255	; 0xff
 8002266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	22ff      	movs	r2, #255	; 0xff
 800226e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d114      	bne.n	80022a2 <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d01a      	beq.n	80022b6 <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	3310      	adds	r3, #16
 8002284:	4618      	mov	r0, r3
 8002286:	f001 f84d 	bl	8003324 <xTaskRemoveFromEventList>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d012      	beq.n	80022b6 <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002290:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <xQueueGenericReset+0xcc>)
 8002292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	f3bf 8f4f 	dsb	sy
 800229c:	f3bf 8f6f 	isb	sy
 80022a0:	e009      	b.n	80022b6 <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	3310      	adds	r3, #16
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fef2 	bl	8002090 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	3324      	adds	r3, #36	; 0x24
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff feed 	bl	8002090 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80022b6:	f001 ff3f 	bl	8004138 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80022ba:	2301      	movs	r3, #1
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	e000ed04 	.word	0xe000ed04

080022c8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08c      	sub	sp, #48	; 0x30
 80022cc:	af02      	add	r7, sp, #8
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	4613      	mov	r3, r2
 80022d4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10a      	bne.n	80022f2 <xQueueGenericCreate+0x2a>
        __asm volatile
 80022dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e0:	f383 8811 	msr	BASEPRI, r3
 80022e4:	f3bf 8f6f 	isb	sy
 80022e8:	f3bf 8f4f 	dsb	sy
 80022ec:	61bb      	str	r3, [r7, #24]
    }
 80022ee:	bf00      	nop
 80022f0:	e7fe      	b.n	80022f0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	fb02 f303 	mul.w	r3, r2, r3
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d006      	beq.n	8002310 <xQueueGenericCreate+0x48>
 8002302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	fbb2 f3f3 	udiv	r3, r2, r3
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	429a      	cmp	r2, r3
 800230e:	d101      	bne.n	8002314 <xQueueGenericCreate+0x4c>
 8002310:	2301      	movs	r3, #1
 8002312:	e000      	b.n	8002316 <xQueueGenericCreate+0x4e>
 8002314:	2300      	movs	r3, #0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10a      	bne.n	8002330 <xQueueGenericCreate+0x68>
        __asm volatile
 800231a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231e:	f383 8811 	msr	BASEPRI, r3
 8002322:	f3bf 8f6f 	isb	sy
 8002326:	f3bf 8f4f 	dsb	sy
 800232a:	617b      	str	r3, [r7, #20]
    }
 800232c:	bf00      	nop
 800232e:	e7fe      	b.n	800232e <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	f113 0f51 	cmn.w	r3, #81	; 0x51
 8002336:	d90a      	bls.n	800234e <xQueueGenericCreate+0x86>
        __asm volatile
 8002338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800233c:	f383 8811 	msr	BASEPRI, r3
 8002340:	f3bf 8f6f 	isb	sy
 8002344:	f3bf 8f4f 	dsb	sy
 8002348:	613b      	str	r3, [r7, #16]
    }
 800234a:	bf00      	nop
 800234c:	e7fe      	b.n	800234c <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	3350      	adds	r3, #80	; 0x50
 8002352:	4618      	mov	r0, r3
 8002354:	f001 ffe2 	bl	800431c <pvPortMalloc>
 8002358:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00d      	beq.n	800237c <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	3350      	adds	r3, #80	; 0x50
 8002368:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800236a:	79fa      	ldrb	r2, [r7, #7]
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	4613      	mov	r3, r2
 8002372:	69fa      	ldr	r2, [r7, #28]
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 f805 	bl	8002386 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800237c:	6a3b      	ldr	r3, [r7, #32]
    }
 800237e:	4618      	mov	r0, r3
 8002380:	3728      	adds	r7, #40	; 0x28
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b084      	sub	sp, #16
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d103      	bne.n	80023a2 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	601a      	str	r2, [r3, #0]
 80023a0:	e002      	b.n	80023a8 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023b4:	2101      	movs	r1, #1
 80023b6:	69b8      	ldr	r0, [r7, #24]
 80023b8:	f7ff ff1e 	bl	80021f8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	78fa      	ldrb	r2, [r7, #3]
 80023c0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80023c4:	bf00      	nop
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08e      	sub	sp, #56	; 0x38
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
 80023d8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80023da:	2300      	movs	r3, #0
 80023dc:	637b      	str	r3, [r7, #52]	; 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	633b      	str	r3, [r7, #48]	; 0x30

    configASSERT( pxQueue );
 80023e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10a      	bne.n	80023fe <xQueueGenericSend+0x32>
        __asm volatile
 80023e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ec:	f383 8811 	msr	BASEPRI, r3
 80023f0:	f3bf 8f6f 	isb	sy
 80023f4:	f3bf 8f4f 	dsb	sy
 80023f8:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80023fa:	bf00      	nop
 80023fc:	e7fe      	b.n	80023fc <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d103      	bne.n	800240c <xQueueGenericSend+0x40>
 8002404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <xQueueGenericSend+0x44>
 800240c:	2301      	movs	r3, #1
 800240e:	e000      	b.n	8002412 <xQueueGenericSend+0x46>
 8002410:	2300      	movs	r3, #0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10a      	bne.n	800242c <xQueueGenericSend+0x60>
        __asm volatile
 8002416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241a:	f383 8811 	msr	BASEPRI, r3
 800241e:	f3bf 8f6f 	isb	sy
 8002422:	f3bf 8f4f 	dsb	sy
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002428:	bf00      	nop
 800242a:	e7fe      	b.n	800242a <xQueueGenericSend+0x5e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d103      	bne.n	800243a <xQueueGenericSend+0x6e>
 8002432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <xQueueGenericSend+0x72>
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <xQueueGenericSend+0x74>
 800243e:	2300      	movs	r3, #0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10a      	bne.n	800245a <xQueueGenericSend+0x8e>
        __asm volatile
 8002444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002448:	f383 8811 	msr	BASEPRI, r3
 800244c:	f3bf 8f6f 	isb	sy
 8002450:	f3bf 8f4f 	dsb	sy
 8002454:	623b      	str	r3, [r7, #32]
    }
 8002456:	bf00      	nop
 8002458:	e7fe      	b.n	8002458 <xQueueGenericSend+0x8c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800245a:	f001 f8ff 	bl	800365c <xTaskGetSchedulerState>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d102      	bne.n	800246a <xQueueGenericSend+0x9e>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <xQueueGenericSend+0xa2>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <xQueueGenericSend+0xa4>
 800246e:	2300      	movs	r3, #0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10a      	bne.n	800248a <xQueueGenericSend+0xbe>
        __asm volatile
 8002474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002478:	f383 8811 	msr	BASEPRI, r3
 800247c:	f3bf 8f6f 	isb	sy
 8002480:	f3bf 8f4f 	dsb	sy
 8002484:	61fb      	str	r3, [r7, #28]
    }
 8002486:	bf00      	nop
 8002488:	e7fe      	b.n	8002488 <xQueueGenericSend+0xbc>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800248a:	f001 fe25 	bl	80040d8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800248e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002490:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002496:	429a      	cmp	r2, r3
 8002498:	d302      	bcc.n	80024a0 <xQueueGenericSend+0xd4>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d129      	bne.n	80024f4 <xQueueGenericSend+0x128>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	68b9      	ldr	r1, [r7, #8]
 80024a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80024a6:	f000 fa19 	bl	80028dc <prvCopyDataToQueue>
 80024aa:	62f8      	str	r0, [r7, #44]	; 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d010      	beq.n	80024d6 <xQueueGenericSend+0x10a>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024b6:	3324      	adds	r3, #36	; 0x24
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 ff33 	bl	8003324 <xTaskRemoveFromEventList>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d013      	beq.n	80024ec <xQueueGenericSend+0x120>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80024c4:	4b3f      	ldr	r3, [pc, #252]	; (80025c4 <xQueueGenericSend+0x1f8>)
 80024c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	f3bf 8f6f 	isb	sy
 80024d4:	e00a      	b.n	80024ec <xQueueGenericSend+0x120>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 80024d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d007      	beq.n	80024ec <xQueueGenericSend+0x120>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 80024dc:	4b39      	ldr	r3, [pc, #228]	; (80025c4 <xQueueGenericSend+0x1f8>)
 80024de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80024ec:	f001 fe24 	bl	8004138 <vPortExitCritical>
                return pdPASS;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e063      	b.n	80025bc <xQueueGenericSend+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d103      	bne.n	8002502 <xQueueGenericSend+0x136>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80024fa:	f001 fe1d 	bl	8004138 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80024fe:	2300      	movs	r3, #0
 8002500:	e05c      	b.n	80025bc <xQueueGenericSend+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002504:	2b00      	cmp	r3, #0
 8002506:	d106      	bne.n	8002516 <xQueueGenericSend+0x14a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	4618      	mov	r0, r3
 800250e:	f000 ff6b 	bl	80033e8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002512:	2301      	movs	r3, #1
 8002514:	637b      	str	r3, [r7, #52]	; 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002516:	f001 fe0f 	bl	8004138 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800251a:	f000 fce5 	bl	8002ee8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800251e:	f001 fddb 	bl	80040d8 <vPortEnterCritical>
 8002522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002524:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002528:	b25b      	sxtb	r3, r3
 800252a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252e:	d103      	bne.n	8002538 <xQueueGenericSend+0x16c>
 8002530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800253a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800253e:	b25b      	sxtb	r3, r3
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d103      	bne.n	800254e <xQueueGenericSend+0x182>
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800254e:	f001 fdf3 	bl	8004138 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002552:	1d3a      	adds	r2, r7, #4
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	4611      	mov	r1, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f000 ff5a 	bl	8003414 <xTaskCheckForTimeOut>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d124      	bne.n	80025b0 <xQueueGenericSend+0x1e4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002566:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002568:	f000 fab0 	bl	8002acc <prvIsQueueFull>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d018      	beq.n	80025a4 <xQueueGenericSend+0x1d8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002574:	3310      	adds	r3, #16
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	4611      	mov	r1, r2
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fe82 	bl	8003284 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002580:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002582:	f000 fa3b 	bl	80029fc <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002586:	f000 fcbd 	bl	8002f04 <xTaskResumeAll>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	f47f af7c 	bne.w	800248a <xQueueGenericSend+0xbe>
                {
                    portYIELD_WITHIN_API();
 8002592:	4b0c      	ldr	r3, [pc, #48]	; (80025c4 <xQueueGenericSend+0x1f8>)
 8002594:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	f3bf 8f4f 	dsb	sy
 800259e:	f3bf 8f6f 	isb	sy
 80025a2:	e772      	b.n	800248a <xQueueGenericSend+0xbe>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80025a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025a6:	f000 fa29 	bl	80029fc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80025aa:	f000 fcab 	bl	8002f04 <xTaskResumeAll>
 80025ae:	e76c      	b.n	800248a <xQueueGenericSend+0xbe>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80025b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80025b2:	f000 fa23 	bl	80029fc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80025b6:	f000 fca5 	bl	8002f04 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80025ba:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3738      	adds	r7, #56	; 0x38
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	e000ed04 	.word	0xe000ed04

080025c8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b090      	sub	sp, #64	; 0x40
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
 80025d4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 80025da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10a      	bne.n	80025f6 <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 80025e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e4:	f383 8811 	msr	BASEPRI, r3
 80025e8:	f3bf 8f6f 	isb	sy
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 80025f2:	bf00      	nop
 80025f4:	e7fe      	b.n	80025f4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d103      	bne.n	8002604 <xQueueGenericSendFromISR+0x3c>
 80025fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <xQueueGenericSendFromISR+0x40>
 8002604:	2301      	movs	r3, #1
 8002606:	e000      	b.n	800260a <xQueueGenericSendFromISR+0x42>
 8002608:	2300      	movs	r3, #0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10a      	bne.n	8002624 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 800260e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002612:	f383 8811 	msr	BASEPRI, r3
 8002616:	f3bf 8f6f 	isb	sy
 800261a:	f3bf 8f4f 	dsb	sy
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002620:	bf00      	nop
 8002622:	e7fe      	b.n	8002622 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2b02      	cmp	r3, #2
 8002628:	d103      	bne.n	8002632 <xQueueGenericSendFromISR+0x6a>
 800262a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <xQueueGenericSendFromISR+0x6e>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <xQueueGenericSendFromISR+0x70>
 8002636:	2300      	movs	r3, #0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10a      	bne.n	8002652 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 800263c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002640:	f383 8811 	msr	BASEPRI, r3
 8002644:	f3bf 8f6f 	isb	sy
 8002648:	f3bf 8f4f 	dsb	sy
 800264c:	623b      	str	r3, [r7, #32]
    }
 800264e:	bf00      	nop
 8002650:	e7fe      	b.n	8002650 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002652:	f001 fe23 	bl	800429c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002656:	f3ef 8211 	mrs	r2, BASEPRI
 800265a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265e:	f383 8811 	msr	BASEPRI, r3
 8002662:	f3bf 8f6f 	isb	sy
 8002666:	f3bf 8f4f 	dsb	sy
 800266a:	61fa      	str	r2, [r7, #28]
 800266c:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800266e:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002670:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002674:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267a:	429a      	cmp	r2, r3
 800267c:	d302      	bcc.n	8002684 <xQueueGenericSendFromISR+0xbc>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	2b02      	cmp	r3, #2
 8002682:	d13e      	bne.n	8002702 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002686:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800268a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	68b9      	ldr	r1, [r7, #8]
 8002698:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800269a:	f000 f91f 	bl	80028dc <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800269e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80026a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a6:	d112      	bne.n	80026ce <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d025      	beq.n	80026fc <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026b2:	3324      	adds	r3, #36	; 0x24
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 fe35 	bl	8003324 <xTaskRemoveFromEventList>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01d      	beq.n	80026fc <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d01a      	beq.n	80026fc <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	e016      	b.n	80026fc <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80026ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80026d2:	2b7f      	cmp	r3, #127	; 0x7f
 80026d4:	d10a      	bne.n	80026ec <xQueueGenericSendFromISR+0x124>
        __asm volatile
 80026d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026da:	f383 8811 	msr	BASEPRI, r3
 80026de:	f3bf 8f6f 	isb	sy
 80026e2:	f3bf 8f4f 	dsb	sy
 80026e6:	617b      	str	r3, [r7, #20]
    }
 80026e8:	bf00      	nop
 80026ea:	e7fe      	b.n	80026ea <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80026ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026f0:	3301      	adds	r3, #1
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	b25a      	sxtb	r2, r3
 80026f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 80026fc:	2301      	movs	r3, #1
 80026fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002700:	e001      	b.n	8002706 <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8002702:	2300      	movs	r3, #0
 8002704:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002708:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002710:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002714:	4618      	mov	r0, r3
 8002716:	3740      	adds	r7, #64	; 0x40
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08c      	sub	sp, #48	; 0x30
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002728:	2300      	movs	r3, #0
 800272a:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002732:	2b00      	cmp	r3, #0
 8002734:	d10a      	bne.n	800274c <xQueueReceive+0x30>
        __asm volatile
 8002736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273a:	f383 8811 	msr	BASEPRI, r3
 800273e:	f3bf 8f6f 	isb	sy
 8002742:	f3bf 8f4f 	dsb	sy
 8002746:	623b      	str	r3, [r7, #32]
    }
 8002748:	bf00      	nop
 800274a:	e7fe      	b.n	800274a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d103      	bne.n	800275a <xQueueReceive+0x3e>
 8002752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <xQueueReceive+0x42>
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <xQueueReceive+0x44>
 800275e:	2300      	movs	r3, #0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10a      	bne.n	800277a <xQueueReceive+0x5e>
        __asm volatile
 8002764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002768:	f383 8811 	msr	BASEPRI, r3
 800276c:	f3bf 8f6f 	isb	sy
 8002770:	f3bf 8f4f 	dsb	sy
 8002774:	61fb      	str	r3, [r7, #28]
    }
 8002776:	bf00      	nop
 8002778:	e7fe      	b.n	8002778 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800277a:	f000 ff6f 	bl	800365c <xTaskGetSchedulerState>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d102      	bne.n	800278a <xQueueReceive+0x6e>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d101      	bne.n	800278e <xQueueReceive+0x72>
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <xQueueReceive+0x74>
 800278e:	2300      	movs	r3, #0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d10a      	bne.n	80027aa <xQueueReceive+0x8e>
        __asm volatile
 8002794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002798:	f383 8811 	msr	BASEPRI, r3
 800279c:	f3bf 8f6f 	isb	sy
 80027a0:	f3bf 8f4f 	dsb	sy
 80027a4:	61bb      	str	r3, [r7, #24]
    }
 80027a6:	bf00      	nop
 80027a8:	e7fe      	b.n	80027a8 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80027aa:	f001 fc95 	bl	80040d8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b2:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80027b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d01f      	beq.n	80027fa <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80027ba:	68b9      	ldr	r1, [r7, #8]
 80027bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027be:	f000 f8f7 	bl	80029b0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	1e5a      	subs	r2, r3, #1
 80027c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c8:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d00f      	beq.n	80027f2 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d4:	3310      	adds	r3, #16
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 fda4 	bl	8003324 <xTaskRemoveFromEventList>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d007      	beq.n	80027f2 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80027e2:	4b3d      	ldr	r3, [pc, #244]	; (80028d8 <xQueueReceive+0x1bc>)
 80027e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	f3bf 8f4f 	dsb	sy
 80027ee:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80027f2:	f001 fca1 	bl	8004138 <vPortExitCritical>
                return pdPASS;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e069      	b.n	80028ce <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d103      	bne.n	8002808 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002800:	f001 fc9a 	bl	8004138 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002804:	2300      	movs	r3, #0
 8002806:	e062      	b.n	80028ce <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280a:	2b00      	cmp	r3, #0
 800280c:	d106      	bne.n	800281c <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800280e:	f107 0310 	add.w	r3, r7, #16
 8002812:	4618      	mov	r0, r3
 8002814:	f000 fde8 	bl	80033e8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002818:	2301      	movs	r3, #1
 800281a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800281c:	f001 fc8c 	bl	8004138 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002820:	f000 fb62 	bl	8002ee8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002824:	f001 fc58 	bl	80040d8 <vPortEnterCritical>
 8002828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800282e:	b25b      	sxtb	r3, r3
 8002830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002834:	d103      	bne.n	800283e <xQueueReceive+0x122>
 8002836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800283e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002840:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002844:	b25b      	sxtb	r3, r3
 8002846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800284a:	d103      	bne.n	8002854 <xQueueReceive+0x138>
 800284c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002854:	f001 fc70 	bl	8004138 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002858:	1d3a      	adds	r2, r7, #4
 800285a:	f107 0310 	add.w	r3, r7, #16
 800285e:	4611      	mov	r1, r2
 8002860:	4618      	mov	r0, r3
 8002862:	f000 fdd7 	bl	8003414 <xTaskCheckForTimeOut>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d123      	bne.n	80028b4 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800286c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800286e:	f000 f917 	bl	8002aa0 <prvIsQueueEmpty>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d017      	beq.n	80028a8 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287a:	3324      	adds	r3, #36	; 0x24
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f000 fcff 	bl	8003284 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002886:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002888:	f000 f8b8 	bl	80029fc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800288c:	f000 fb3a 	bl	8002f04 <xTaskResumeAll>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d189      	bne.n	80027aa <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <xQueueReceive+0x1bc>)
 8002898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800289c:	601a      	str	r2, [r3, #0]
 800289e:	f3bf 8f4f 	dsb	sy
 80028a2:	f3bf 8f6f 	isb	sy
 80028a6:	e780      	b.n	80027aa <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80028a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028aa:	f000 f8a7 	bl	80029fc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80028ae:	f000 fb29 	bl	8002f04 <xTaskResumeAll>
 80028b2:	e77a      	b.n	80027aa <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80028b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028b6:	f000 f8a1 	bl	80029fc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80028ba:	f000 fb23 	bl	8002f04 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028c0:	f000 f8ee 	bl	8002aa0 <prvIsQueueEmpty>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f43f af6f 	beq.w	80027aa <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80028cc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3730      	adds	r7, #48	; 0x30
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	e000ed04 	.word	0xe000ed04

080028dc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80028e8:	2300      	movs	r3, #0
 80028ea:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10d      	bne.n	8002916 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d14d      	bne.n	800299e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	4618      	mov	r0, r3
 8002908:	f000 fec6 	bl	8003698 <xTaskPriorityDisinherit>
 800290c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	e043      	b.n	800299e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d119      	bne.n	8002950 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6858      	ldr	r0, [r3, #4]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	461a      	mov	r2, r3
 8002926:	68b9      	ldr	r1, [r7, #8]
 8002928:	f001 ff1a 	bl	8004760 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	685a      	ldr	r2, [r3, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	441a      	add	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	429a      	cmp	r2, r3
 8002944:	d32b      	bcc.n	800299e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	e026      	b.n	800299e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	68d8      	ldr	r0, [r3, #12]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	461a      	mov	r2, r3
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	f001 ff00 	bl	8004760 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	68da      	ldr	r2, [r3, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	425b      	negs	r3, r3
 800296a:	441a      	add	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	d207      	bcs.n	800298c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002984:	425b      	negs	r3, r3
 8002986:	441a      	add	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d105      	bne.n	800299e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d002      	beq.n	800299e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	3b01      	subs	r3, #1
 800299c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 80029a6:	697b      	ldr	r3, [r7, #20]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d018      	beq.n	80029f4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	441a      	add	r2, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68da      	ldr	r2, [r3, #12]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d303      	bcc.n	80029e4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68d9      	ldr	r1, [r3, #12]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	461a      	mov	r2, r3
 80029ee:	6838      	ldr	r0, [r7, #0]
 80029f0:	f001 feb6 	bl	8004760 <memcpy>
    }
}
 80029f4:	bf00      	nop
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002a04:	f001 fb68 	bl	80040d8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a0e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a10:	e011      	b.n	8002a36 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d012      	beq.n	8002a40 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3324      	adds	r3, #36	; 0x24
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 fc80 	bl	8003324 <xTaskRemoveFromEventList>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002a2a:	f000 fd59 	bl	80034e0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
 8002a30:	3b01      	subs	r3, #1
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	dce9      	bgt.n	8002a12 <prvUnlockQueue+0x16>
 8002a3e:	e000      	b.n	8002a42 <prvUnlockQueue+0x46>
                        break;
 8002a40:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	22ff      	movs	r2, #255	; 0xff
 8002a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002a4a:	f001 fb75 	bl	8004138 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002a4e:	f001 fb43 	bl	80040d8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a58:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a5a:	e011      	b.n	8002a80 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d012      	beq.n	8002a8a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3310      	adds	r3, #16
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 fc5b 	bl	8003324 <xTaskRemoveFromEventList>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002a74:	f000 fd34 	bl	80034e0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002a78:	7bbb      	ldrb	r3, [r7, #14]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	dce9      	bgt.n	8002a5c <prvUnlockQueue+0x60>
 8002a88:	e000      	b.n	8002a8c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002a8a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	22ff      	movs	r2, #255	; 0xff
 8002a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002a94:	f001 fb50 	bl	8004138 <vPortExitCritical>
}
 8002a98:	bf00      	nop
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002aa8:	f001 fb16 	bl	80040d8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d102      	bne.n	8002aba <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	e001      	b.n	8002abe <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002abe:	f001 fb3b 	bl	8004138 <vPortExitCritical>

    return xReturn;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002ad4:	f001 fb00 	bl	80040d8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d102      	bne.n	8002aea <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	60fb      	str	r3, [r7, #12]
 8002ae8:	e001      	b.n	8002aee <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002aea:	2300      	movs	r3, #0
 8002aec:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002aee:	f001 fb23 	bl	8004138 <vPortExitCritical>

    return xReturn;
 8002af2:	68fb      	ldr	r3, [r7, #12]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	e014      	b.n	8002b36 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002b0c:	4a0f      	ldr	r2, [pc, #60]	; (8002b4c <vQueueAddToRegistry+0x50>)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10b      	bne.n	8002b30 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002b18:	490c      	ldr	r1, [pc, #48]	; (8002b4c <vQueueAddToRegistry+0x50>)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002b22:	4a0a      	ldr	r2, [pc, #40]	; (8002b4c <vQueueAddToRegistry+0x50>)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4413      	add	r3, r2
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8002b2e:	e006      	b.n	8002b3e <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	3301      	adds	r3, #1
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2b07      	cmp	r3, #7
 8002b3a:	d9e7      	bls.n	8002b0c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002b3c:	bf00      	nop
 8002b3e:	bf00      	nop
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	2000007c 	.word	0x2000007c

08002b50 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002b60:	f001 faba 	bl	80040d8 <vPortEnterCritical>
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b6a:	b25b      	sxtb	r3, r3
 8002b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b70:	d103      	bne.n	8002b7a <vQueueWaitForMessageRestricted+0x2a>
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b80:	b25b      	sxtb	r3, r3
 8002b82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b86:	d103      	bne.n	8002b90 <vQueueWaitForMessageRestricted+0x40>
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b90:	f001 fad2 	bl	8004138 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d106      	bne.n	8002baa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	3324      	adds	r3, #36	; 0x24
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	68b9      	ldr	r1, [r7, #8]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f000 fb91 	bl	80032cc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002baa:	6978      	ldr	r0, [r7, #20]
 8002bac:	f7ff ff26 	bl	80029fc <prvUnlockQueue>
    }
 8002bb0:	bf00      	nop
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08c      	sub	sp, #48	; 0x30
 8002bbc:	af04      	add	r7, sp, #16
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	603b      	str	r3, [r7, #0]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002bc8:	88fb      	ldrh	r3, [r7, #6]
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f001 fba5 	bl	800431c <pvPortMalloc>
 8002bd2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00e      	beq.n	8002bf8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002bda:	2058      	movs	r0, #88	; 0x58
 8002bdc:	f001 fb9e 	bl	800431c <pvPortMalloc>
 8002be0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	631a      	str	r2, [r3, #48]	; 0x30
 8002bee:	e005      	b.n	8002bfc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002bf0:	6978      	ldr	r0, [r7, #20]
 8002bf2:	f001 fc73 	bl	80044dc <vPortFree>
 8002bf6:	e001      	b.n	8002bfc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d013      	beq.n	8002c2a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c02:	88fa      	ldrh	r2, [r7, #6]
 8002c04:	2300      	movs	r3, #0
 8002c06:	9303      	str	r3, [sp, #12]
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	9302      	str	r3, [sp, #8]
 8002c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0e:	9301      	str	r3, [sp, #4]
 8002c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	68b9      	ldr	r1, [r7, #8]
 8002c18:	68f8      	ldr	r0, [r7, #12]
 8002c1a:	f000 f80e 	bl	8002c3a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002c1e:	69f8      	ldr	r0, [r7, #28]
 8002c20:	f000 f8a2 	bl	8002d68 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002c24:	2301      	movs	r3, #1
 8002c26:	61bb      	str	r3, [r7, #24]
 8002c28:	e002      	b.n	8002c30 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002c30:	69bb      	ldr	r3, [r7, #24]
    }
 8002c32:	4618      	mov	r0, r3
 8002c34:	3720      	adds	r7, #32
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b088      	sub	sp, #32
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	60f8      	str	r0, [r7, #12]
 8002c42:	60b9      	str	r1, [r7, #8]
 8002c44:	607a      	str	r2, [r7, #4]
 8002c46:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	461a      	mov	r2, r3
 8002c52:	21a5      	movs	r1, #165	; 0xa5
 8002c54:	f001 fd92 	bl	800477c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c62:	3b01      	subs	r3, #1
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	4413      	add	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	f023 0307 	bic.w	r3, r3, #7
 8002c70:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c72:	69bb      	ldr	r3, [r7, #24]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00a      	beq.n	8002c92 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c80:	f383 8811 	msr	BASEPRI, r3
 8002c84:	f3bf 8f6f 	isb	sy
 8002c88:	f3bf 8f4f 	dsb	sy
 8002c8c:	617b      	str	r3, [r7, #20]
    }
 8002c8e:	bf00      	nop
 8002c90:	e7fe      	b.n	8002c90 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d01f      	beq.n	8002cd8 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c98:	2300      	movs	r3, #0
 8002c9a:	61fb      	str	r3, [r7, #28]
 8002c9c:	e012      	b.n	8002cc4 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	7819      	ldrb	r1, [r3, #0]
 8002ca6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	4413      	add	r3, r2
 8002cac:	3334      	adds	r3, #52	; 0x34
 8002cae:	460a      	mov	r2, r1
 8002cb0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d006      	beq.n	8002ccc <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	61fb      	str	r3, [r7, #28]
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	2b09      	cmp	r3, #9
 8002cc8:	d9e9      	bls.n	8002c9e <prvInitialiseNewTask+0x64>
 8002cca:	e000      	b.n	8002cce <prvInitialiseNewTask+0x94>
            {
                break;
 8002ccc:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002cd6:	e003      	b.n	8002ce0 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d901      	bls.n	8002cea <prvInitialiseNewTask+0xb0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ce6:	2304      	movs	r3, #4
 8002ce8:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cee:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cf4:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfe:	3304      	adds	r3, #4
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff f9e5 	bl	80020d0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d08:	3318      	adds	r3, #24
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff f9e0 	bl	80020d0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d14:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d18:	f1c3 0205 	rsb	r2, r3, #5
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1e:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d24:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d28:	3350      	adds	r3, #80	; 0x50
 8002d2a:	2204      	movs	r2, #4
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f001 fd24 	bl	800477c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	3354      	adds	r3, #84	; 0x54
 8002d38:	2201      	movs	r2, #1
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f001 fd1d 	bl	800477c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d42:	683a      	ldr	r2, [r7, #0]
 8002d44:	68f9      	ldr	r1, [r7, #12]
 8002d46:	69b8      	ldr	r0, [r7, #24]
 8002d48:	f001 f898 	bl	8003e7c <pxPortInitialiseStack>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d50:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <prvInitialiseNewTask+0x124>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d5c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d5e:	bf00      	nop
 8002d60:	3720      	adds	r7, #32
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002d70:	f001 f9b2 	bl	80040d8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002d74:	4b2c      	ldr	r3, [pc, #176]	; (8002e28 <prvAddNewTaskToReadyList+0xc0>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	4a2b      	ldr	r2, [pc, #172]	; (8002e28 <prvAddNewTaskToReadyList+0xc0>)
 8002d7c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002d7e:	4b2b      	ldr	r3, [pc, #172]	; (8002e2c <prvAddNewTaskToReadyList+0xc4>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d109      	bne.n	8002d9a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002d86:	4a29      	ldr	r2, [pc, #164]	; (8002e2c <prvAddNewTaskToReadyList+0xc4>)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d8c:	4b26      	ldr	r3, [pc, #152]	; (8002e28 <prvAddNewTaskToReadyList+0xc0>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d110      	bne.n	8002db6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002d94:	f000 fbc8 	bl	8003528 <prvInitialiseTaskLists>
 8002d98:	e00d      	b.n	8002db6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002d9a:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <prvAddNewTaskToReadyList+0xc8>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d109      	bne.n	8002db6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002da2:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <prvAddNewTaskToReadyList+0xc4>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d802      	bhi.n	8002db6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002db0:	4a1e      	ldr	r2, [pc, #120]	; (8002e2c <prvAddNewTaskToReadyList+0xc4>)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002db6:	4b1f      	ldr	r3, [pc, #124]	; (8002e34 <prvAddNewTaskToReadyList+0xcc>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	4a1d      	ldr	r2, [pc, #116]	; (8002e34 <prvAddNewTaskToReadyList+0xcc>)
 8002dbe:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002dc0:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <prvAddNewTaskToReadyList+0xcc>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	2201      	movs	r2, #1
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	4b19      	ldr	r3, [pc, #100]	; (8002e38 <prvAddNewTaskToReadyList+0xd0>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	4a18      	ldr	r2, [pc, #96]	; (8002e38 <prvAddNewTaskToReadyList+0xd0>)
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4a15      	ldr	r2, [pc, #84]	; (8002e3c <prvAddNewTaskToReadyList+0xd4>)
 8002de8:	441a      	add	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3304      	adds	r3, #4
 8002dee:	4619      	mov	r1, r3
 8002df0:	4610      	mov	r0, r2
 8002df2:	f7ff f97a 	bl	80020ea <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002df6:	f001 f99f 	bl	8004138 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <prvAddNewTaskToReadyList+0xc8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00e      	beq.n	8002e20 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e02:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <prvAddNewTaskToReadyList+0xc4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d207      	bcs.n	8002e20 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <prvAddNewTaskToReadyList+0xd8>)
 8002e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e20:	bf00      	nop
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	20000194 	.word	0x20000194
 8002e2c:	200000bc 	.word	0x200000bc
 8002e30:	200001a0 	.word	0x200001a0
 8002e34:	200001b0 	.word	0x200001b0
 8002e38:	2000019c 	.word	0x2000019c
 8002e3c:	200000c0 	.word	0x200000c0
 8002e40:	e000ed04 	.word	0xe000ed04

08002e44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002e4a:	4b20      	ldr	r3, [pc, #128]	; (8002ecc <vTaskStartScheduler+0x88>)
 8002e4c:	9301      	str	r3, [sp, #4]
 8002e4e:	2300      	movs	r3, #0
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	2300      	movs	r3, #0
 8002e54:	2282      	movs	r2, #130	; 0x82
 8002e56:	491e      	ldr	r1, [pc, #120]	; (8002ed0 <vTaskStartScheduler+0x8c>)
 8002e58:	481e      	ldr	r0, [pc, #120]	; (8002ed4 <vTaskStartScheduler+0x90>)
 8002e5a:	f7ff fead 	bl	8002bb8 <xTaskCreate>
 8002e5e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d102      	bne.n	8002e6c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8002e66:	f000 fcf7 	bl	8003858 <xTimerCreateTimerTask>
 8002e6a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d116      	bne.n	8002ea0 <vTaskStartScheduler+0x5c>
        __asm volatile
 8002e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e76:	f383 8811 	msr	BASEPRI, r3
 8002e7a:	f3bf 8f6f 	isb	sy
 8002e7e:	f3bf 8f4f 	dsb	sy
 8002e82:	60bb      	str	r3, [r7, #8]
    }
 8002e84:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002e86:	4b14      	ldr	r3, [pc, #80]	; (8002ed8 <vTaskStartScheduler+0x94>)
 8002e88:	f04f 32ff 	mov.w	r2, #4294967295
 8002e8c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002e8e:	4b13      	ldr	r3, [pc, #76]	; (8002edc <vTaskStartScheduler+0x98>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e94:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <vTaskStartScheduler+0x9c>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8002e9a:	f001 f87b 	bl	8003f94 <xPortStartScheduler>
 8002e9e:	e00e      	b.n	8002ebe <vTaskStartScheduler+0x7a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea6:	d10a      	bne.n	8002ebe <vTaskStartScheduler+0x7a>
        __asm volatile
 8002ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	607b      	str	r3, [r7, #4]
    }
 8002eba:	bf00      	nop
 8002ebc:	e7fe      	b.n	8002ebc <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002ebe:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <vTaskStartScheduler+0xa0>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
}
 8002ec2:	bf00      	nop
 8002ec4:	3710      	adds	r7, #16
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	200001b8 	.word	0x200001b8
 8002ed0:	080047dc 	.word	0x080047dc
 8002ed4:	080034f9 	.word	0x080034f9
 8002ed8:	200001b4 	.word	0x200001b4
 8002edc:	200001a0 	.word	0x200001a0
 8002ee0:	20000198 	.word	0x20000198
 8002ee4:	2000000c 	.word	0x2000000c

08002ee8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002eec:	4b04      	ldr	r3, [pc, #16]	; (8002f00 <vTaskSuspendAll+0x18>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	4a03      	ldr	r2, [pc, #12]	; (8002f00 <vTaskSuspendAll+0x18>)
 8002ef4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002ef6:	bf00      	nop
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	200001bc 	.word	0x200001bc

08002f04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002f12:	4b41      	ldr	r3, [pc, #260]	; (8003018 <xTaskResumeAll+0x114>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10a      	bne.n	8002f30 <xTaskResumeAll+0x2c>
        __asm volatile
 8002f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1e:	f383 8811 	msr	BASEPRI, r3
 8002f22:	f3bf 8f6f 	isb	sy
 8002f26:	f3bf 8f4f 	dsb	sy
 8002f2a:	603b      	str	r3, [r7, #0]
    }
 8002f2c:	bf00      	nop
 8002f2e:	e7fe      	b.n	8002f2e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002f30:	f001 f8d2 	bl	80040d8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002f34:	4b38      	ldr	r3, [pc, #224]	; (8003018 <xTaskResumeAll+0x114>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	4a37      	ldr	r2, [pc, #220]	; (8003018 <xTaskResumeAll+0x114>)
 8002f3c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f3e:	4b36      	ldr	r3, [pc, #216]	; (8003018 <xTaskResumeAll+0x114>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d161      	bne.n	800300a <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f46:	4b35      	ldr	r3, [pc, #212]	; (800301c <xTaskResumeAll+0x118>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d05d      	beq.n	800300a <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f4e:	e02e      	b.n	8002fae <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f50:	4b33      	ldr	r3, [pc, #204]	; (8003020 <xTaskResumeAll+0x11c>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	3318      	adds	r3, #24
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f7ff f921 	bl	80021a4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	3304      	adds	r3, #4
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff f91c 	bl	80021a4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	2201      	movs	r2, #1
 8002f72:	409a      	lsls	r2, r3
 8002f74:	4b2b      	ldr	r3, [pc, #172]	; (8003024 <xTaskResumeAll+0x120>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	4a2a      	ldr	r2, [pc, #168]	; (8003024 <xTaskResumeAll+0x120>)
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f82:	4613      	mov	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4a27      	ldr	r2, [pc, #156]	; (8003028 <xTaskResumeAll+0x124>)
 8002f8c:	441a      	add	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	3304      	adds	r3, #4
 8002f92:	4619      	mov	r1, r3
 8002f94:	4610      	mov	r0, r2
 8002f96:	f7ff f8a8 	bl	80020ea <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9e:	4b23      	ldr	r3, [pc, #140]	; (800302c <xTaskResumeAll+0x128>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d302      	bcc.n	8002fae <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 8002fa8:	4b21      	ldr	r3, [pc, #132]	; (8003030 <xTaskResumeAll+0x12c>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fae:	4b1c      	ldr	r3, [pc, #112]	; (8003020 <xTaskResumeAll+0x11c>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d1cc      	bne.n	8002f50 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002fbc:	f000 fb32 	bl	8003624 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002fc0:	4b1c      	ldr	r3, [pc, #112]	; (8003034 <xTaskResumeAll+0x130>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d010      	beq.n	8002fee <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002fcc:	f000 f846 	bl	800305c <xTaskIncrementTick>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 8002fd6:	4b16      	ldr	r3, [pc, #88]	; (8003030 <xTaskResumeAll+0x12c>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	3b01      	subs	r3, #1
 8002fe0:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1f1      	bne.n	8002fcc <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8002fe8:	4b12      	ldr	r3, [pc, #72]	; (8003034 <xTaskResumeAll+0x130>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002fee:	4b10      	ldr	r3, [pc, #64]	; (8003030 <xTaskResumeAll+0x12c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d009      	beq.n	800300a <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002ffa:	4b0f      	ldr	r3, [pc, #60]	; (8003038 <xTaskResumeAll+0x134>)
 8002ffc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003000:	601a      	str	r2, [r3, #0]
 8003002:	f3bf 8f4f 	dsb	sy
 8003006:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800300a:	f001 f895 	bl	8004138 <vPortExitCritical>

    return xAlreadyYielded;
 800300e:	68bb      	ldr	r3, [r7, #8]
}
 8003010:	4618      	mov	r0, r3
 8003012:	3710      	adds	r7, #16
 8003014:	46bd      	mov	sp, r7
 8003016:	bd80      	pop	{r7, pc}
 8003018:	200001bc 	.word	0x200001bc
 800301c:	20000194 	.word	0x20000194
 8003020:	20000154 	.word	0x20000154
 8003024:	2000019c 	.word	0x2000019c
 8003028:	200000c0 	.word	0x200000c0
 800302c:	200000bc 	.word	0x200000bc
 8003030:	200001a8 	.word	0x200001a8
 8003034:	200001a4 	.word	0x200001a4
 8003038:	e000ed04 	.word	0xe000ed04

0800303c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003042:	4b05      	ldr	r3, [pc, #20]	; (8003058 <xTaskGetTickCount+0x1c>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003048:	687b      	ldr	r3, [r7, #4]
}
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	20000198 	.word	0x20000198

0800305c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003066:	4b4e      	ldr	r3, [pc, #312]	; (80031a0 <xTaskIncrementTick+0x144>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2b00      	cmp	r3, #0
 800306c:	f040 808e 	bne.w	800318c <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003070:	4b4c      	ldr	r3, [pc, #304]	; (80031a4 <xTaskIncrementTick+0x148>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	3301      	adds	r3, #1
 8003076:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003078:	4a4a      	ldr	r2, [pc, #296]	; (80031a4 <xTaskIncrementTick+0x148>)
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d120      	bne.n	80030c6 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003084:	4b48      	ldr	r3, [pc, #288]	; (80031a8 <xTaskIncrementTick+0x14c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00a      	beq.n	80030a4 <xTaskIncrementTick+0x48>
        __asm volatile
 800308e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003092:	f383 8811 	msr	BASEPRI, r3
 8003096:	f3bf 8f6f 	isb	sy
 800309a:	f3bf 8f4f 	dsb	sy
 800309e:	603b      	str	r3, [r7, #0]
    }
 80030a0:	bf00      	nop
 80030a2:	e7fe      	b.n	80030a2 <xTaskIncrementTick+0x46>
 80030a4:	4b40      	ldr	r3, [pc, #256]	; (80031a8 <xTaskIncrementTick+0x14c>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	4b40      	ldr	r3, [pc, #256]	; (80031ac <xTaskIncrementTick+0x150>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a3e      	ldr	r2, [pc, #248]	; (80031a8 <xTaskIncrementTick+0x14c>)
 80030b0:	6013      	str	r3, [r2, #0]
 80030b2:	4a3e      	ldr	r2, [pc, #248]	; (80031ac <xTaskIncrementTick+0x150>)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6013      	str	r3, [r2, #0]
 80030b8:	4b3d      	ldr	r3, [pc, #244]	; (80031b0 <xTaskIncrementTick+0x154>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3301      	adds	r3, #1
 80030be:	4a3c      	ldr	r2, [pc, #240]	; (80031b0 <xTaskIncrementTick+0x154>)
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	f000 faaf 	bl	8003624 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80030c6:	4b3b      	ldr	r3, [pc, #236]	; (80031b4 <xTaskIncrementTick+0x158>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	693a      	ldr	r2, [r7, #16]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d348      	bcc.n	8003162 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030d0:	4b35      	ldr	r3, [pc, #212]	; (80031a8 <xTaskIncrementTick+0x14c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d104      	bne.n	80030e4 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030da:	4b36      	ldr	r3, [pc, #216]	; (80031b4 <xTaskIncrementTick+0x158>)
 80030dc:	f04f 32ff 	mov.w	r2, #4294967295
 80030e0:	601a      	str	r2, [r3, #0]
                    break;
 80030e2:	e03e      	b.n	8003162 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030e4:	4b30      	ldr	r3, [pc, #192]	; (80031a8 <xTaskIncrementTick+0x14c>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	429a      	cmp	r2, r3
 80030fa:	d203      	bcs.n	8003104 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80030fc:	4a2d      	ldr	r2, [pc, #180]	; (80031b4 <xTaskIncrementTick+0x158>)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003102:	e02e      	b.n	8003162 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	3304      	adds	r3, #4
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff f84b 	bl	80021a4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003112:	2b00      	cmp	r3, #0
 8003114:	d004      	beq.n	8003120 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	3318      	adds	r3, #24
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff f842 	bl	80021a4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	2201      	movs	r2, #1
 8003126:	409a      	lsls	r2, r3
 8003128:	4b23      	ldr	r3, [pc, #140]	; (80031b8 <xTaskIncrementTick+0x15c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4313      	orrs	r3, r2
 800312e:	4a22      	ldr	r2, [pc, #136]	; (80031b8 <xTaskIncrementTick+0x15c>)
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4a1f      	ldr	r2, [pc, #124]	; (80031bc <xTaskIncrementTick+0x160>)
 8003140:	441a      	add	r2, r3
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	3304      	adds	r3, #4
 8003146:	4619      	mov	r1, r3
 8003148:	4610      	mov	r0, r2
 800314a:	f7fe ffce 	bl	80020ea <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003152:	4b1b      	ldr	r3, [pc, #108]	; (80031c0 <xTaskIncrementTick+0x164>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003158:	429a      	cmp	r2, r3
 800315a:	d3b9      	bcc.n	80030d0 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 800315c:	2301      	movs	r3, #1
 800315e:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003160:	e7b6      	b.n	80030d0 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003162:	4b17      	ldr	r3, [pc, #92]	; (80031c0 <xTaskIncrementTick+0x164>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003168:	4914      	ldr	r1, [pc, #80]	; (80031bc <xTaskIncrementTick+0x160>)
 800316a:	4613      	mov	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d901      	bls.n	800317e <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 800317a:	2301      	movs	r3, #1
 800317c:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800317e:	4b11      	ldr	r3, [pc, #68]	; (80031c4 <xTaskIncrementTick+0x168>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d007      	beq.n	8003196 <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 8003186:	2301      	movs	r3, #1
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	e004      	b.n	8003196 <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800318c:	4b0e      	ldr	r3, [pc, #56]	; (80031c8 <xTaskIncrementTick+0x16c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	3301      	adds	r3, #1
 8003192:	4a0d      	ldr	r2, [pc, #52]	; (80031c8 <xTaskIncrementTick+0x16c>)
 8003194:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003196:	697b      	ldr	r3, [r7, #20]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	200001bc 	.word	0x200001bc
 80031a4:	20000198 	.word	0x20000198
 80031a8:	2000014c 	.word	0x2000014c
 80031ac:	20000150 	.word	0x20000150
 80031b0:	200001ac 	.word	0x200001ac
 80031b4:	200001b4 	.word	0x200001b4
 80031b8:	2000019c 	.word	0x2000019c
 80031bc:	200000c0 	.word	0x200000c0
 80031c0:	200000bc 	.word	0x200000bc
 80031c4:	200001a8 	.word	0x200001a8
 80031c8:	200001a4 	.word	0x200001a4

080031cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80031d2:	4b27      	ldr	r3, [pc, #156]	; (8003270 <vTaskSwitchContext+0xa4>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80031da:	4b26      	ldr	r3, [pc, #152]	; (8003274 <vTaskSwitchContext+0xa8>)
 80031dc:	2201      	movs	r2, #1
 80031de:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80031e0:	e03f      	b.n	8003262 <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80031e2:	4b24      	ldr	r3, [pc, #144]	; (8003274 <vTaskSwitchContext+0xa8>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031e8:	4b23      	ldr	r3, [pc, #140]	; (8003278 <vTaskSwitchContext+0xac>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	fab3 f383 	clz	r3, r3
 80031f4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80031f6:	7afb      	ldrb	r3, [r7, #11]
 80031f8:	f1c3 031f 	rsb	r3, r3, #31
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	491f      	ldr	r1, [pc, #124]	; (800327c <vTaskSwitchContext+0xb0>)
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	4613      	mov	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10a      	bne.n	8003228 <vTaskSwitchContext+0x5c>
        __asm volatile
 8003212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003216:	f383 8811 	msr	BASEPRI, r3
 800321a:	f3bf 8f6f 	isb	sy
 800321e:	f3bf 8f4f 	dsb	sy
 8003222:	607b      	str	r3, [r7, #4]
    }
 8003224:	bf00      	nop
 8003226:	e7fe      	b.n	8003226 <vTaskSwitchContext+0x5a>
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4a12      	ldr	r2, [pc, #72]	; (800327c <vTaskSwitchContext+0xb0>)
 8003234:	4413      	add	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	685a      	ldr	r2, [r3, #4]
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	605a      	str	r2, [r3, #4]
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	3308      	adds	r3, #8
 800324a:	429a      	cmp	r2, r3
 800324c:	d104      	bne.n	8003258 <vTaskSwitchContext+0x8c>
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	685a      	ldr	r2, [r3, #4]
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	605a      	str	r2, [r3, #4]
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	4a08      	ldr	r2, [pc, #32]	; (8003280 <vTaskSwitchContext+0xb4>)
 8003260:	6013      	str	r3, [r2, #0]
}
 8003262:	bf00      	nop
 8003264:	371c      	adds	r7, #28
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	200001bc 	.word	0x200001bc
 8003274:	200001a8 	.word	0x200001a8
 8003278:	2000019c 	.word	0x2000019c
 800327c:	200000c0 	.word	0x200000c0
 8003280:	200000bc 	.word	0x200000bc

08003284 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d10a      	bne.n	80032aa <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003298:	f383 8811 	msr	BASEPRI, r3
 800329c:	f3bf 8f6f 	isb	sy
 80032a0:	f3bf 8f4f 	dsb	sy
 80032a4:	60fb      	str	r3, [r7, #12]
    }
 80032a6:	bf00      	nop
 80032a8:	e7fe      	b.n	80032a8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032aa:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <vTaskPlaceOnEventList+0x44>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	3318      	adds	r3, #24
 80032b0:	4619      	mov	r1, r3
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7fe ff3d 	bl	8002132 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80032b8:	2101      	movs	r1, #1
 80032ba:	6838      	ldr	r0, [r7, #0]
 80032bc:	f000 fa66 	bl	800378c <prvAddCurrentTaskToDelayedList>
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	200000bc 	.word	0x200000bc

080032cc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b086      	sub	sp, #24
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d10a      	bne.n	80032f4 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80032de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032e2:	f383 8811 	msr	BASEPRI, r3
 80032e6:	f3bf 8f6f 	isb	sy
 80032ea:	f3bf 8f4f 	dsb	sy
 80032ee:	617b      	str	r3, [r7, #20]
    }
 80032f0:	bf00      	nop
 80032f2:	e7fe      	b.n	80032f2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032f4:	4b0a      	ldr	r3, [pc, #40]	; (8003320 <vTaskPlaceOnEventListRestricted+0x54>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	3318      	adds	r3, #24
 80032fa:	4619      	mov	r1, r3
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f7fe fef4 	bl	80020ea <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d002      	beq.n	800330e <vTaskPlaceOnEventListRestricted+0x42>
        {
            xTicksToWait = portMAX_DELAY;
 8003308:	f04f 33ff 	mov.w	r3, #4294967295
 800330c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	68b8      	ldr	r0, [r7, #8]
 8003312:	f000 fa3b 	bl	800378c <prvAddCurrentTaskToDelayedList>
    }
 8003316:	bf00      	nop
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	200000bc 	.word	0x200000bc

08003324 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b086      	sub	sp, #24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d10a      	bne.n	8003350 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800333a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800333e:	f383 8811 	msr	BASEPRI, r3
 8003342:	f3bf 8f6f 	isb	sy
 8003346:	f3bf 8f4f 	dsb	sy
 800334a:	60fb      	str	r3, [r7, #12]
    }
 800334c:	bf00      	nop
 800334e:	e7fe      	b.n	800334e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	3318      	adds	r3, #24
 8003354:	4618      	mov	r0, r3
 8003356:	f7fe ff25 	bl	80021a4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800335a:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <xTaskRemoveFromEventList+0xac>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d11c      	bne.n	800339c <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	3304      	adds	r3, #4
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe ff1c 	bl	80021a4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003370:	2201      	movs	r2, #1
 8003372:	409a      	lsls	r2, r3
 8003374:	4b17      	ldr	r3, [pc, #92]	; (80033d4 <xTaskRemoveFromEventList+0xb0>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4313      	orrs	r3, r2
 800337a:	4a16      	ldr	r2, [pc, #88]	; (80033d4 <xTaskRemoveFromEventList+0xb0>)
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4a13      	ldr	r2, [pc, #76]	; (80033d8 <xTaskRemoveFromEventList+0xb4>)
 800338c:	441a      	add	r2, r3
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	3304      	adds	r3, #4
 8003392:	4619      	mov	r1, r3
 8003394:	4610      	mov	r0, r2
 8003396:	f7fe fea8 	bl	80020ea <vListInsertEnd>
 800339a:	e005      	b.n	80033a8 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	3318      	adds	r3, #24
 80033a0:	4619      	mov	r1, r3
 80033a2:	480e      	ldr	r0, [pc, #56]	; (80033dc <xTaskRemoveFromEventList+0xb8>)
 80033a4:	f7fe fea1 	bl	80020ea <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ac:	4b0c      	ldr	r3, [pc, #48]	; (80033e0 <xTaskRemoveFromEventList+0xbc>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d905      	bls.n	80033c2 <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80033b6:	2301      	movs	r3, #1
 80033b8:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80033ba:	4b0a      	ldr	r3, [pc, #40]	; (80033e4 <xTaskRemoveFromEventList+0xc0>)
 80033bc:	2201      	movs	r2, #1
 80033be:	601a      	str	r2, [r3, #0]
 80033c0:	e001      	b.n	80033c6 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80033c6:	697b      	ldr	r3, [r7, #20]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	200001bc 	.word	0x200001bc
 80033d4:	2000019c 	.word	0x2000019c
 80033d8:	200000c0 	.word	0x200000c0
 80033dc:	20000154 	.word	0x20000154
 80033e0:	200000bc 	.word	0x200000bc
 80033e4:	200001a8 	.word	0x200001a8

080033e8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80033f0:	4b06      	ldr	r3, [pc, #24]	; (800340c <vTaskInternalSetTimeOutState+0x24>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80033f8:	4b05      	ldr	r3, [pc, #20]	; (8003410 <vTaskInternalSetTimeOutState+0x28>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	605a      	str	r2, [r3, #4]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	200001ac 	.word	0x200001ac
 8003410:	20000198 	.word	0x20000198

08003414 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10a      	bne.n	800343a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003428:	f383 8811 	msr	BASEPRI, r3
 800342c:	f3bf 8f6f 	isb	sy
 8003430:	f3bf 8f4f 	dsb	sy
 8003434:	613b      	str	r3, [r7, #16]
    }
 8003436:	bf00      	nop
 8003438:	e7fe      	b.n	8003438 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10a      	bne.n	8003456 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003444:	f383 8811 	msr	BASEPRI, r3
 8003448:	f3bf 8f6f 	isb	sy
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	60fb      	str	r3, [r7, #12]
    }
 8003452:	bf00      	nop
 8003454:	e7fe      	b.n	8003454 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003456:	f000 fe3f 	bl	80040d8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800345a:	4b1f      	ldr	r3, [pc, #124]	; (80034d8 <xTaskCheckForTimeOut+0xc4>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003472:	d102      	bne.n	800347a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003474:	2300      	movs	r3, #0
 8003476:	61fb      	str	r3, [r7, #28]
 8003478:	e026      	b.n	80034c8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	4b17      	ldr	r3, [pc, #92]	; (80034dc <xTaskCheckForTimeOut+0xc8>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d00a      	beq.n	800349c <xTaskCheckForTimeOut+0x88>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	429a      	cmp	r2, r3
 800348e:	d305      	bcc.n	800349c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003490:	2301      	movs	r3, #1
 8003492:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]
 800349a:	e015      	b.n	80034c8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d20b      	bcs.n	80034be <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	1ad2      	subs	r2, r2, r3
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff ff98 	bl	80033e8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80034b8:	2300      	movs	r3, #0
 80034ba:	61fb      	str	r3, [r7, #28]
 80034bc:	e004      	b.n	80034c8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80034c4:	2301      	movs	r3, #1
 80034c6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80034c8:	f000 fe36 	bl	8004138 <vPortExitCritical>

    return xReturn;
 80034cc:	69fb      	ldr	r3, [r7, #28]
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3720      	adds	r7, #32
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	20000198 	.word	0x20000198
 80034dc:	200001ac 	.word	0x200001ac

080034e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80034e4:	4b03      	ldr	r3, [pc, #12]	; (80034f4 <vTaskMissedYield+0x14>)
 80034e6:	2201      	movs	r2, #1
 80034e8:	601a      	str	r2, [r3, #0]
}
 80034ea:	bf00      	nop
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	200001a8 	.word	0x200001a8

080034f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003500:	f000 f852 	bl	80035a8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003504:	4b06      	ldr	r3, [pc, #24]	; (8003520 <prvIdleTask+0x28>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b01      	cmp	r3, #1
 800350a:	d9f9      	bls.n	8003500 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <prvIdleTask+0x2c>)
 800350e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800351c:	e7f0      	b.n	8003500 <prvIdleTask+0x8>
 800351e:	bf00      	nop
 8003520:	200000c0 	.word	0x200000c0
 8003524:	e000ed04 	.word	0xe000ed04

08003528 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800352e:	2300      	movs	r3, #0
 8003530:	607b      	str	r3, [r7, #4]
 8003532:	e00c      	b.n	800354e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4a12      	ldr	r2, [pc, #72]	; (8003588 <prvInitialiseTaskLists+0x60>)
 8003540:	4413      	add	r3, r2
 8003542:	4618      	mov	r0, r3
 8003544:	f7fe fda4 	bl	8002090 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3301      	adds	r3, #1
 800354c:	607b      	str	r3, [r7, #4]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b04      	cmp	r3, #4
 8003552:	d9ef      	bls.n	8003534 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003554:	480d      	ldr	r0, [pc, #52]	; (800358c <prvInitialiseTaskLists+0x64>)
 8003556:	f7fe fd9b 	bl	8002090 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800355a:	480d      	ldr	r0, [pc, #52]	; (8003590 <prvInitialiseTaskLists+0x68>)
 800355c:	f7fe fd98 	bl	8002090 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003560:	480c      	ldr	r0, [pc, #48]	; (8003594 <prvInitialiseTaskLists+0x6c>)
 8003562:	f7fe fd95 	bl	8002090 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003566:	480c      	ldr	r0, [pc, #48]	; (8003598 <prvInitialiseTaskLists+0x70>)
 8003568:	f7fe fd92 	bl	8002090 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800356c:	480b      	ldr	r0, [pc, #44]	; (800359c <prvInitialiseTaskLists+0x74>)
 800356e:	f7fe fd8f 	bl	8002090 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003572:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <prvInitialiseTaskLists+0x78>)
 8003574:	4a05      	ldr	r2, [pc, #20]	; (800358c <prvInitialiseTaskLists+0x64>)
 8003576:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003578:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <prvInitialiseTaskLists+0x7c>)
 800357a:	4a05      	ldr	r2, [pc, #20]	; (8003590 <prvInitialiseTaskLists+0x68>)
 800357c:	601a      	str	r2, [r3, #0]
}
 800357e:	bf00      	nop
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	200000c0 	.word	0x200000c0
 800358c:	20000124 	.word	0x20000124
 8003590:	20000138 	.word	0x20000138
 8003594:	20000154 	.word	0x20000154
 8003598:	20000168 	.word	0x20000168
 800359c:	20000180 	.word	0x20000180
 80035a0:	2000014c 	.word	0x2000014c
 80035a4:	20000150 	.word	0x20000150

080035a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035ae:	e019      	b.n	80035e4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80035b0:	f000 fd92 	bl	80040d8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035b4:	4b10      	ldr	r3, [pc, #64]	; (80035f8 <prvCheckTasksWaitingTermination+0x50>)
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	3304      	adds	r3, #4
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fe fdef 	bl	80021a4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80035c6:	4b0d      	ldr	r3, [pc, #52]	; (80035fc <prvCheckTasksWaitingTermination+0x54>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	4a0b      	ldr	r2, [pc, #44]	; (80035fc <prvCheckTasksWaitingTermination+0x54>)
 80035ce:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <prvCheckTasksWaitingTermination+0x58>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	3b01      	subs	r3, #1
 80035d6:	4a0a      	ldr	r2, [pc, #40]	; (8003600 <prvCheckTasksWaitingTermination+0x58>)
 80035d8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80035da:	f000 fdad 	bl	8004138 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f810 	bl	8003604 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035e4:	4b06      	ldr	r3, [pc, #24]	; (8003600 <prvCheckTasksWaitingTermination+0x58>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1e1      	bne.n	80035b0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80035ec:	bf00      	nop
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	20000168 	.word	0x20000168
 80035fc:	20000194 	.word	0x20000194
 8003600:	2000017c 	.word	0x2000017c

08003604 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003610:	4618      	mov	r0, r3
 8003612:	f000 ff63 	bl	80044dc <vPortFree>
                vPortFree( pxTCB );
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f000 ff60 	bl	80044dc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800361c:	bf00      	nop
 800361e:	3708      	adds	r7, #8
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003628:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <prvResetNextTaskUnblockTime+0x30>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d104      	bne.n	800363c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003632:	4b09      	ldr	r3, [pc, #36]	; (8003658 <prvResetNextTaskUnblockTime+0x34>)
 8003634:	f04f 32ff 	mov.w	r2, #4294967295
 8003638:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800363a:	e005      	b.n	8003648 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800363c:	4b05      	ldr	r3, [pc, #20]	; (8003654 <prvResetNextTaskUnblockTime+0x30>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a04      	ldr	r2, [pc, #16]	; (8003658 <prvResetNextTaskUnblockTime+0x34>)
 8003646:	6013      	str	r3, [r2, #0]
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	2000014c 	.word	0x2000014c
 8003658:	200001b4 	.word	0x200001b4

0800365c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003662:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <xTaskGetSchedulerState+0x34>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d102      	bne.n	8003670 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800366a:	2301      	movs	r3, #1
 800366c:	607b      	str	r3, [r7, #4]
 800366e:	e008      	b.n	8003682 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003670:	4b08      	ldr	r3, [pc, #32]	; (8003694 <xTaskGetSchedulerState+0x38>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d102      	bne.n	800367e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003678:	2302      	movs	r3, #2
 800367a:	607b      	str	r3, [r7, #4]
 800367c:	e001      	b.n	8003682 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800367e:	2300      	movs	r3, #0
 8003680:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003682:	687b      	ldr	r3, [r7, #4]
    }
 8003684:	4618      	mov	r0, r3
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr
 8003690:	200001a0 	.word	0x200001a0
 8003694:	200001bc 	.word	0x200001bc

08003698 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80036a4:	2300      	movs	r3, #0
 80036a6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d063      	beq.n	8003776 <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80036ae:	4b34      	ldr	r3, [pc, #208]	; (8003780 <xTaskPriorityDisinherit+0xe8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d00a      	beq.n	80036ce <xTaskPriorityDisinherit+0x36>
        __asm volatile
 80036b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036bc:	f383 8811 	msr	BASEPRI, r3
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	60fb      	str	r3, [r7, #12]
    }
 80036ca:	bf00      	nop
 80036cc:	e7fe      	b.n	80036cc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d10a      	bne.n	80036ec <xTaskPriorityDisinherit+0x54>
        __asm volatile
 80036d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036da:	f383 8811 	msr	BASEPRI, r3
 80036de:	f3bf 8f6f 	isb	sy
 80036e2:	f3bf 8f4f 	dsb	sy
 80036e6:	60bb      	str	r3, [r7, #8]
    }
 80036e8:	bf00      	nop
 80036ea:	e7fe      	b.n	80036ea <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f0:	1e5a      	subs	r2, r3, #1
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036fe:	429a      	cmp	r2, r3
 8003700:	d039      	beq.n	8003776 <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003706:	2b00      	cmp	r3, #0
 8003708:	d135      	bne.n	8003776 <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	3304      	adds	r3, #4
 800370e:	4618      	mov	r0, r3
 8003710:	f7fe fd48 	bl	80021a4 <uxListRemove>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10a      	bne.n	8003730 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371e:	2201      	movs	r2, #1
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	43da      	mvns	r2, r3
 8003726:	4b17      	ldr	r3, [pc, #92]	; (8003784 <xTaskPriorityDisinherit+0xec>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4013      	ands	r3, r2
 800372c:	4a15      	ldr	r2, [pc, #84]	; (8003784 <xTaskPriorityDisinherit+0xec>)
 800372e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	f1c3 0205 	rsb	r2, r3, #5
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	2201      	movs	r2, #1
 800374a:	409a      	lsls	r2, r3
 800374c:	4b0d      	ldr	r3, [pc, #52]	; (8003784 <xTaskPriorityDisinherit+0xec>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4313      	orrs	r3, r2
 8003752:	4a0c      	ldr	r2, [pc, #48]	; (8003784 <xTaskPriorityDisinherit+0xec>)
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4a09      	ldr	r2, [pc, #36]	; (8003788 <xTaskPriorityDisinherit+0xf0>)
 8003764:	441a      	add	r2, r3
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	3304      	adds	r3, #4
 800376a:	4619      	mov	r1, r3
 800376c:	4610      	mov	r0, r2
 800376e:	f7fe fcbc 	bl	80020ea <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003772:	2301      	movs	r3, #1
 8003774:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003776:	697b      	ldr	r3, [r7, #20]
    }
 8003778:	4618      	mov	r0, r3
 800377a:	3718      	adds	r7, #24
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	200000bc 	.word	0x200000bc
 8003784:	2000019c 	.word	0x2000019c
 8003788:	200000c0 	.word	0x200000c0

0800378c <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003796:	4b29      	ldr	r3, [pc, #164]	; (800383c <prvAddCurrentTaskToDelayedList+0xb0>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800379c:	4b28      	ldr	r3, [pc, #160]	; (8003840 <prvAddCurrentTaskToDelayedList+0xb4>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3304      	adds	r3, #4
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fe fcfe 	bl	80021a4 <uxListRemove>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10b      	bne.n	80037c6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80037ae:	4b24      	ldr	r3, [pc, #144]	; (8003840 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b4:	2201      	movs	r2, #1
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43da      	mvns	r2, r3
 80037bc:	4b21      	ldr	r3, [pc, #132]	; (8003844 <prvAddCurrentTaskToDelayedList+0xb8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4013      	ands	r3, r2
 80037c2:	4a20      	ldr	r2, [pc, #128]	; (8003844 <prvAddCurrentTaskToDelayedList+0xb8>)
 80037c4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037cc:	d10a      	bne.n	80037e4 <prvAddCurrentTaskToDelayedList+0x58>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d007      	beq.n	80037e4 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037d4:	4b1a      	ldr	r3, [pc, #104]	; (8003840 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3304      	adds	r3, #4
 80037da:	4619      	mov	r1, r3
 80037dc:	481a      	ldr	r0, [pc, #104]	; (8003848 <prvAddCurrentTaskToDelayedList+0xbc>)
 80037de:	f7fe fc84 	bl	80020ea <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80037e2:	e026      	b.n	8003832 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4413      	add	r3, r2
 80037ea:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037ec:	4b14      	ldr	r3, [pc, #80]	; (8003840 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68ba      	ldr	r2, [r7, #8]
 80037f2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d209      	bcs.n	8003810 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037fc:	4b13      	ldr	r3, [pc, #76]	; (800384c <prvAddCurrentTaskToDelayedList+0xc0>)
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	4b0f      	ldr	r3, [pc, #60]	; (8003840 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3304      	adds	r3, #4
 8003806:	4619      	mov	r1, r3
 8003808:	4610      	mov	r0, r2
 800380a:	f7fe fc92 	bl	8002132 <vListInsert>
}
 800380e:	e010      	b.n	8003832 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003810:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	4b0a      	ldr	r3, [pc, #40]	; (8003840 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	3304      	adds	r3, #4
 800381a:	4619      	mov	r1, r3
 800381c:	4610      	mov	r0, r2
 800381e:	f7fe fc88 	bl	8002132 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003822:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	429a      	cmp	r2, r3
 800382a:	d202      	bcs.n	8003832 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800382c:	4a09      	ldr	r2, [pc, #36]	; (8003854 <prvAddCurrentTaskToDelayedList+0xc8>)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	6013      	str	r3, [r2, #0]
}
 8003832:	bf00      	nop
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000198 	.word	0x20000198
 8003840:	200000bc 	.word	0x200000bc
 8003844:	2000019c 	.word	0x2000019c
 8003848:	20000180 	.word	0x20000180
 800384c:	20000150 	.word	0x20000150
 8003850:	2000014c 	.word	0x2000014c
 8003854:	200001b4 	.word	0x200001b4

08003858 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800385e:	2300      	movs	r3, #0
 8003860:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003862:	f000 fad5 	bl	8003e10 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003866:	4b11      	ldr	r3, [pc, #68]	; (80038ac <xTimerCreateTimerTask+0x54>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00b      	beq.n	8003886 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800386e:	4b10      	ldr	r3, [pc, #64]	; (80038b0 <xTimerCreateTimerTask+0x58>)
 8003870:	9301      	str	r3, [sp, #4]
 8003872:	2302      	movs	r3, #2
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	2300      	movs	r3, #0
 8003878:	f44f 7282 	mov.w	r2, #260	; 0x104
 800387c:	490d      	ldr	r1, [pc, #52]	; (80038b4 <xTimerCreateTimerTask+0x5c>)
 800387e:	480e      	ldr	r0, [pc, #56]	; (80038b8 <xTimerCreateTimerTask+0x60>)
 8003880:	f7ff f99a 	bl	8002bb8 <xTaskCreate>
 8003884:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10a      	bne.n	80038a2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 800388c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003890:	f383 8811 	msr	BASEPRI, r3
 8003894:	f3bf 8f6f 	isb	sy
 8003898:	f3bf 8f4f 	dsb	sy
 800389c:	603b      	str	r3, [r7, #0]
    }
 800389e:	bf00      	nop
 80038a0:	e7fe      	b.n	80038a0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80038a2:	687b      	ldr	r3, [r7, #4]
    }
 80038a4:	4618      	mov	r0, r3
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	200001f0 	.word	0x200001f0
 80038b0:	200001f4 	.word	0x200001f4
 80038b4:	080047e4 	.word	0x080047e4
 80038b8:	080039f1 	.word	0x080039f1

080038bc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08a      	sub	sp, #40	; 0x28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
 80038c8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80038ca:	2300      	movs	r3, #0
 80038cc:	627b      	str	r3, [r7, #36]	; 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10a      	bne.n	80038ea <xTimerGenericCommand+0x2e>
        __asm volatile
 80038d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d8:	f383 8811 	msr	BASEPRI, r3
 80038dc:	f3bf 8f6f 	isb	sy
 80038e0:	f3bf 8f4f 	dsb	sy
 80038e4:	623b      	str	r3, [r7, #32]
    }
 80038e6:	bf00      	nop
 80038e8:	e7fe      	b.n	80038e8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80038ea:	4b1a      	ldr	r3, [pc, #104]	; (8003954 <xTimerGenericCommand+0x98>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d02a      	beq.n	8003948 <xTimerGenericCommand+0x8c>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b05      	cmp	r3, #5
 8003902:	dc18      	bgt.n	8003936 <xTimerGenericCommand+0x7a>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003904:	f7ff feaa 	bl	800365c <xTaskGetSchedulerState>
 8003908:	4603      	mov	r3, r0
 800390a:	2b02      	cmp	r3, #2
 800390c:	d109      	bne.n	8003922 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800390e:	4b11      	ldr	r3, [pc, #68]	; (8003954 <xTimerGenericCommand+0x98>)
 8003910:	6818      	ldr	r0, [r3, #0]
 8003912:	f107 0114 	add.w	r1, r7, #20
 8003916:	2300      	movs	r3, #0
 8003918:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800391a:	f7fe fd57 	bl	80023cc <xQueueGenericSend>
 800391e:	6278      	str	r0, [r7, #36]	; 0x24
 8003920:	e012      	b.n	8003948 <xTimerGenericCommand+0x8c>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003922:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <xTimerGenericCommand+0x98>)
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	f107 0114 	add.w	r1, r7, #20
 800392a:	2300      	movs	r3, #0
 800392c:	2200      	movs	r2, #0
 800392e:	f7fe fd4d 	bl	80023cc <xQueueGenericSend>
 8003932:	6278      	str	r0, [r7, #36]	; 0x24
 8003934:	e008      	b.n	8003948 <xTimerGenericCommand+0x8c>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003936:	4b07      	ldr	r3, [pc, #28]	; (8003954 <xTimerGenericCommand+0x98>)
 8003938:	6818      	ldr	r0, [r3, #0]
 800393a:	f107 0114 	add.w	r1, r7, #20
 800393e:	2300      	movs	r3, #0
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	f7fe fe41 	bl	80025c8 <xQueueGenericSendFromISR>
 8003946:	6278      	str	r0, [r7, #36]	; 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800394a:	4618      	mov	r0, r3
 800394c:	3728      	adds	r7, #40	; 0x28
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	200001f0 	.word	0x200001f0

08003958 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af02      	add	r7, sp, #8
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003962:	4b22      	ldr	r3, [pc, #136]	; (80039ec <prvProcessExpiredTimer+0x94>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	3304      	adds	r3, #4
 8003970:	4618      	mov	r0, r3
 8003972:	f7fe fc17 	bl	80021a4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800397c:	f003 0304 	and.w	r3, r3, #4
 8003980:	2b00      	cmp	r3, #0
 8003982:	d022      	beq.n	80039ca <prvProcessExpiredTimer+0x72>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	699a      	ldr	r2, [r3, #24]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	18d1      	adds	r1, r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	683a      	ldr	r2, [r7, #0]
 8003990:	6978      	ldr	r0, [r7, #20]
 8003992:	f000 f8d1 	bl	8003b38 <prvInsertTimerInActiveList>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01f      	beq.n	80039dc <prvProcessExpiredTimer+0x84>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800399c:	2300      	movs	r3, #0
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	2300      	movs	r3, #0
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	2100      	movs	r1, #0
 80039a6:	6978      	ldr	r0, [r7, #20]
 80039a8:	f7ff ff88 	bl	80038bc <xTimerGenericCommand>
 80039ac:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d113      	bne.n	80039dc <prvProcessExpiredTimer+0x84>
        __asm volatile
 80039b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b8:	f383 8811 	msr	BASEPRI, r3
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	60fb      	str	r3, [r7, #12]
    }
 80039c6:	bf00      	nop
 80039c8:	e7fe      	b.n	80039c8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039d0:	f023 0301 	bic.w	r3, r3, #1
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	6a1b      	ldr	r3, [r3, #32]
 80039e0:	6978      	ldr	r0, [r7, #20]
 80039e2:	4798      	blx	r3
    }
 80039e4:	bf00      	nop
 80039e6:	3718      	adds	r7, #24
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	200001e8 	.word	0x200001e8

080039f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b084      	sub	sp, #16
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80039f8:	f107 0308 	add.w	r3, r7, #8
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 f857 	bl	8003ab0 <prvGetNextExpireTime>
 8003a02:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	4619      	mov	r1, r3
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f000 f803 	bl	8003a14 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003a0e:	f000 f8d5 	bl	8003bbc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003a12:	e7f1      	b.n	80039f8 <prvTimerTask+0x8>

08003a14 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003a1e:	f7ff fa63 	bl	8002ee8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a22:	f107 0308 	add.w	r3, r7, #8
 8003a26:	4618      	mov	r0, r3
 8003a28:	f000 f866 	bl	8003af8 <prvSampleTimeNow>
 8003a2c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d130      	bne.n	8003a96 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10a      	bne.n	8003a50 <prvProcessTimerOrBlockTask+0x3c>
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d806      	bhi.n	8003a50 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003a42:	f7ff fa5f 	bl	8002f04 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003a46:	68f9      	ldr	r1, [r7, #12]
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff ff85 	bl	8003958 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003a4e:	e024      	b.n	8003a9a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d008      	beq.n	8003a68 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003a56:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <prvProcessTimerOrBlockTask+0x90>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <prvProcessTimerOrBlockTask+0x50>
 8003a60:	2301      	movs	r3, #1
 8003a62:	e000      	b.n	8003a66 <prvProcessTimerOrBlockTask+0x52>
 8003a64:	2300      	movs	r3, #0
 8003a66:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003a68:	4b0f      	ldr	r3, [pc, #60]	; (8003aa8 <prvProcessTimerOrBlockTask+0x94>)
 8003a6a:	6818      	ldr	r0, [r3, #0]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	4619      	mov	r1, r3
 8003a76:	f7ff f86b 	bl	8002b50 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003a7a:	f7ff fa43 	bl	8002f04 <xTaskResumeAll>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10a      	bne.n	8003a9a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003a84:	4b09      	ldr	r3, [pc, #36]	; (8003aac <prvProcessTimerOrBlockTask+0x98>)
 8003a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	f3bf 8f4f 	dsb	sy
 8003a90:	f3bf 8f6f 	isb	sy
    }
 8003a94:	e001      	b.n	8003a9a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003a96:	f7ff fa35 	bl	8002f04 <xTaskResumeAll>
    }
 8003a9a:	bf00      	nop
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	200001ec 	.word	0x200001ec
 8003aa8:	200001f0 	.word	0x200001f0
 8003aac:	e000ed04 	.word	0xe000ed04

08003ab0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ab8:	4b0e      	ldr	r3, [pc, #56]	; (8003af4 <prvGetNextExpireTime+0x44>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <prvGetNextExpireTime+0x16>
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	e000      	b.n	8003ac8 <prvGetNextExpireTime+0x18>
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d105      	bne.n	8003ae0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ad4:	4b07      	ldr	r3, [pc, #28]	; (8003af4 <prvGetNextExpireTime+0x44>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	e001      	b.n	8003ae4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
    }
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	200001e8 	.word	0x200001e8

08003af8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003b00:	f7ff fa9c 	bl	800303c <xTaskGetTickCount>
 8003b04:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003b06:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <prvSampleTimeNow+0x3c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d205      	bcs.n	8003b1c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003b10:	f000 f91a 	bl	8003d48 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	e002      	b.n	8003b22 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003b22:	4a04      	ldr	r2, [pc, #16]	; (8003b34 <prvSampleTimeNow+0x3c>)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003b28:	68fb      	ldr	r3, [r7, #12]
    }
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	200001f8 	.word	0x200001f8

08003b38 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
 8003b44:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003b56:	68ba      	ldr	r2, [r7, #8]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d812      	bhi.n	8003b84 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	1ad2      	subs	r2, r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	699b      	ldr	r3, [r3, #24]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d302      	bcc.n	8003b72 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	e01b      	b.n	8003baa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003b72:	4b10      	ldr	r3, [pc, #64]	; (8003bb4 <prvInsertTimerInActiveList+0x7c>)
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	4610      	mov	r0, r2
 8003b7e:	f7fe fad8 	bl	8002132 <vListInsert>
 8003b82:	e012      	b.n	8003baa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d206      	bcs.n	8003b9a <prvInsertTimerInActiveList+0x62>
 8003b8c:	68ba      	ldr	r2, [r7, #8]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d302      	bcc.n	8003b9a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003b94:	2301      	movs	r3, #1
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	e007      	b.n	8003baa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b9a:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <prvInsertTimerInActiveList+0x80>)
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	f7fe fac4 	bl	8002132 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003baa:	697b      	ldr	r3, [r7, #20]
    }
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	200001ec 	.word	0x200001ec
 8003bb8:	200001e8 	.word	0x200001e8

08003bbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b08c      	sub	sp, #48	; 0x30
 8003bc0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003bc2:	e0ae      	b.n	8003d22 <prvProcessReceivedCommands+0x166>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f2c0 80aa 	blt.w	8003d20 <prvProcessReceivedCommands+0x164>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	627b      	str	r3, [r7, #36]	; 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d004      	beq.n	8003be2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bda:	3304      	adds	r3, #4
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fe fae1 	bl	80021a4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003be2:	1d3b      	adds	r3, r7, #4
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff ff87 	bl	8003af8 <prvSampleTimeNow>
 8003bea:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2b09      	cmp	r3, #9
 8003bf0:	f200 8097 	bhi.w	8003d22 <prvProcessReceivedCommands+0x166>
 8003bf4:	a201      	add	r2, pc, #4	; (adr r2, 8003bfc <prvProcessReceivedCommands+0x40>)
 8003bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfa:	bf00      	nop
 8003bfc:	08003c25 	.word	0x08003c25
 8003c00:	08003c25 	.word	0x08003c25
 8003c04:	08003c25 	.word	0x08003c25
 8003c08:	08003c99 	.word	0x08003c99
 8003c0c:	08003cad 	.word	0x08003cad
 8003c10:	08003cf7 	.word	0x08003cf7
 8003c14:	08003c25 	.word	0x08003c25
 8003c18:	08003c25 	.word	0x08003c25
 8003c1c:	08003c99 	.word	0x08003c99
 8003c20:	08003cad 	.word	0x08003cad
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	18d1      	adds	r1, r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6a3a      	ldr	r2, [r7, #32]
 8003c42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c44:	f7ff ff78 	bl	8003b38 <prvInsertTimerInActiveList>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d069      	beq.n	8003d22 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c54:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d05e      	beq.n	8003d22 <prvProcessReceivedCommands+0x166>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	441a      	add	r2, r3
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	9300      	str	r3, [sp, #0]
 8003c70:	2300      	movs	r3, #0
 8003c72:	2100      	movs	r1, #0
 8003c74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c76:	f7ff fe21 	bl	80038bc <xTimerGenericCommand>
 8003c7a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d14f      	bne.n	8003d22 <prvProcessReceivedCommands+0x166>
        __asm volatile
 8003c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c86:	f383 8811 	msr	BASEPRI, r3
 8003c8a:	f3bf 8f6f 	isb	sy
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	61bb      	str	r3, [r7, #24]
    }
 8003c94:	bf00      	nop
 8003c96:	e7fe      	b.n	8003c96 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c9e:	f023 0301 	bic.w	r3, r3, #1
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8003caa:	e03a      	b.n	8003d22 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cb2:	f043 0301 	orr.w	r3, r3, #1
 8003cb6:	b2da      	uxtb	r2, r3
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10a      	bne.n	8003ce2 <prvProcessReceivedCommands+0x126>
        __asm volatile
 8003ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	617b      	str	r3, [r7, #20]
    }
 8003cde:	bf00      	nop
 8003ce0:	e7fe      	b.n	8003ce0 <prvProcessReceivedCommands+0x124>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	6a3b      	ldr	r3, [r7, #32]
 8003ce8:	18d1      	adds	r1, r2, r3
 8003cea:	6a3b      	ldr	r3, [r7, #32]
 8003cec:	6a3a      	ldr	r2, [r7, #32]
 8003cee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cf0:	f7ff ff22 	bl	8003b38 <prvInsertTimerInActiveList>
                        break;
 8003cf4:	e015      	b.n	8003d22 <prvProcessReceivedCommands+0x166>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d103      	bne.n	8003d0c <prvProcessReceivedCommands+0x150>
                                {
                                    vPortFree( pxTimer );
 8003d04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d06:	f000 fbe9 	bl	80044dc <vPortFree>
 8003d0a:	e00a      	b.n	8003d22 <prvProcessReceivedCommands+0x166>
                                }
                                else
                                {
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d12:	f023 0301 	bic.w	r3, r3, #1
 8003d16:	b2da      	uxtb	r2, r3
 8003d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003d1e:	e000      	b.n	8003d22 <prvProcessReceivedCommands+0x166>

                    default:
                        /* Don't expect to get here. */
                        break;
                }
            }
 8003d20:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d22:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <prvProcessReceivedCommands+0x188>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f107 0108 	add.w	r1, r7, #8
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	f7fe fcf5 	bl	800271c <xQueueReceive>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f47f af45 	bne.w	8003bc4 <prvProcessReceivedCommands+0x8>
        }
    }
 8003d3a:	bf00      	nop
 8003d3c:	bf00      	nop
 8003d3e:	3728      	adds	r7, #40	; 0x28
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	200001f0 	.word	0x200001f0

08003d48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b088      	sub	sp, #32
 8003d4c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d4e:	e048      	b.n	8003de2 <prvSwitchTimerLists+0x9a>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d50:	4b2d      	ldr	r3, [pc, #180]	; (8003e08 <prvSwitchTimerLists+0xc0>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d5a:	4b2b      	ldr	r3, [pc, #172]	; (8003e08 <prvSwitchTimerLists+0xc0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	3304      	adds	r3, #4
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fe fa1b 	bl	80021a4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d02e      	beq.n	8003de2 <prvSwitchTimerLists+0x9a>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	699b      	ldr	r3, [r3, #24]
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d90e      	bls.n	8003db4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003da2:	4b19      	ldr	r3, [pc, #100]	; (8003e08 <prvSwitchTimerLists+0xc0>)
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	3304      	adds	r3, #4
 8003daa:	4619      	mov	r1, r3
 8003dac:	4610      	mov	r0, r2
 8003dae:	f7fe f9c0 	bl	8002132 <vListInsert>
 8003db2:	e016      	b.n	8003de2 <prvSwitchTimerLists+0x9a>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003db4:	2300      	movs	r3, #0
 8003db6:	9300      	str	r3, [sp, #0]
 8003db8:	2300      	movs	r3, #0
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f7ff fd7c 	bl	80038bc <xTimerGenericCommand>
 8003dc4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d10a      	bne.n	8003de2 <prvSwitchTimerLists+0x9a>
        __asm volatile
 8003dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd0:	f383 8811 	msr	BASEPRI, r3
 8003dd4:	f3bf 8f6f 	isb	sy
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	603b      	str	r3, [r7, #0]
    }
 8003dde:	bf00      	nop
 8003de0:	e7fe      	b.n	8003de0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003de2:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <prvSwitchTimerLists+0xc0>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1b1      	bne.n	8003d50 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8003dec:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <prvSwitchTimerLists+0xc0>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8003df2:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <prvSwitchTimerLists+0xc4>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a04      	ldr	r2, [pc, #16]	; (8003e08 <prvSwitchTimerLists+0xc0>)
 8003df8:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003dfa:	4a04      	ldr	r2, [pc, #16]	; (8003e0c <prvSwitchTimerLists+0xc4>)
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	6013      	str	r3, [r2, #0]
    }
 8003e00:	bf00      	nop
 8003e02:	3718      	adds	r7, #24
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	200001e8 	.word	0x200001e8
 8003e0c:	200001ec 	.word	0x200001ec

08003e10 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003e10:	b580      	push	{r7, lr}
 8003e12:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003e14:	f000 f960 	bl	80040d8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003e18:	4b12      	ldr	r3, [pc, #72]	; (8003e64 <prvCheckForValidListAndQueue+0x54>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d11d      	bne.n	8003e5c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003e20:	4811      	ldr	r0, [pc, #68]	; (8003e68 <prvCheckForValidListAndQueue+0x58>)
 8003e22:	f7fe f935 	bl	8002090 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003e26:	4811      	ldr	r0, [pc, #68]	; (8003e6c <prvCheckForValidListAndQueue+0x5c>)
 8003e28:	f7fe f932 	bl	8002090 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003e2c:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <prvCheckForValidListAndQueue+0x60>)
 8003e2e:	4a0e      	ldr	r2, [pc, #56]	; (8003e68 <prvCheckForValidListAndQueue+0x58>)
 8003e30:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003e32:	4b10      	ldr	r3, [pc, #64]	; (8003e74 <prvCheckForValidListAndQueue+0x64>)
 8003e34:	4a0d      	ldr	r2, [pc, #52]	; (8003e6c <prvCheckForValidListAndQueue+0x5c>)
 8003e36:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003e38:	2200      	movs	r2, #0
 8003e3a:	210c      	movs	r1, #12
 8003e3c:	200a      	movs	r0, #10
 8003e3e:	f7fe fa43 	bl	80022c8 <xQueueGenericCreate>
 8003e42:	4603      	mov	r3, r0
 8003e44:	4a07      	ldr	r2, [pc, #28]	; (8003e64 <prvCheckForValidListAndQueue+0x54>)
 8003e46:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8003e48:	4b06      	ldr	r3, [pc, #24]	; (8003e64 <prvCheckForValidListAndQueue+0x54>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003e50:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <prvCheckForValidListAndQueue+0x54>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4908      	ldr	r1, [pc, #32]	; (8003e78 <prvCheckForValidListAndQueue+0x68>)
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fe fe50 	bl	8002afc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003e5c:	f000 f96c 	bl	8004138 <vPortExitCritical>
    }
 8003e60:	bf00      	nop
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	200001f0 	.word	0x200001f0
 8003e68:	200001c0 	.word	0x200001c0
 8003e6c:	200001d4 	.word	0x200001d4
 8003e70:	200001e8 	.word	0x200001e8
 8003e74:	200001ec 	.word	0x200001ec
 8003e78:	080047ec 	.word	0x080047ec

08003e7c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	3b04      	subs	r3, #4
 8003e8c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e94:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	3b04      	subs	r3, #4
 8003e9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	f023 0201 	bic.w	r2, r3, #1
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	3b04      	subs	r3, #4
 8003eaa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003eac:	4a0c      	ldr	r2, [pc, #48]	; (8003ee0 <pxPortInitialiseStack+0x64>)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	3b14      	subs	r3, #20
 8003eb6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	3b04      	subs	r3, #4
 8003ec2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f06f 0202 	mvn.w	r2, #2
 8003eca:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	3b20      	subs	r3, #32
 8003ed0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3714      	adds	r7, #20
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	08003ee5 	.word	0x08003ee5

08003ee4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003eea:	2300      	movs	r3, #0
 8003eec:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003eee:	4b12      	ldr	r3, [pc, #72]	; (8003f38 <prvTaskExitError+0x54>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ef6:	d00a      	beq.n	8003f0e <prvTaskExitError+0x2a>
        __asm volatile
 8003ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efc:	f383 8811 	msr	BASEPRI, r3
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	60fb      	str	r3, [r7, #12]
    }
 8003f0a:	bf00      	nop
 8003f0c:	e7fe      	b.n	8003f0c <prvTaskExitError+0x28>
        __asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	60bb      	str	r3, [r7, #8]
    }
 8003f20:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003f22:	bf00      	nop
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0fc      	beq.n	8003f24 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003f2a:	bf00      	nop
 8003f2c:	bf00      	nop
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	20000010 	.word	0x20000010
 8003f3c:	00000000 	.word	0x00000000

08003f40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003f40:	4b07      	ldr	r3, [pc, #28]	; (8003f60 <pxCurrentTCBConst2>)
 8003f42:	6819      	ldr	r1, [r3, #0]
 8003f44:	6808      	ldr	r0, [r1, #0]
 8003f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f4a:	f380 8809 	msr	PSP, r0
 8003f4e:	f3bf 8f6f 	isb	sy
 8003f52:	f04f 0000 	mov.w	r0, #0
 8003f56:	f380 8811 	msr	BASEPRI, r0
 8003f5a:	4770      	bx	lr
 8003f5c:	f3af 8000 	nop.w

08003f60 <pxCurrentTCBConst2>:
 8003f60:	200000bc 	.word	0x200000bc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003f64:	bf00      	nop
 8003f66:	bf00      	nop

08003f68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003f68:	4808      	ldr	r0, [pc, #32]	; (8003f8c <prvPortStartFirstTask+0x24>)
 8003f6a:	6800      	ldr	r0, [r0, #0]
 8003f6c:	6800      	ldr	r0, [r0, #0]
 8003f6e:	f380 8808 	msr	MSP, r0
 8003f72:	f04f 0000 	mov.w	r0, #0
 8003f76:	f380 8814 	msr	CONTROL, r0
 8003f7a:	b662      	cpsie	i
 8003f7c:	b661      	cpsie	f
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	df00      	svc	0
 8003f88:	bf00      	nop
 8003f8a:	0000      	.short	0x0000
 8003f8c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003f90:	bf00      	nop
 8003f92:	bf00      	nop

08003f94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f9a:	4b46      	ldr	r3, [pc, #280]	; (80040b4 <xPortStartScheduler+0x120>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a46      	ldr	r2, [pc, #280]	; (80040b8 <xPortStartScheduler+0x124>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d10a      	bne.n	8003fba <xPortStartScheduler+0x26>
        __asm volatile
 8003fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa8:	f383 8811 	msr	BASEPRI, r3
 8003fac:	f3bf 8f6f 	isb	sy
 8003fb0:	f3bf 8f4f 	dsb	sy
 8003fb4:	613b      	str	r3, [r7, #16]
    }
 8003fb6:	bf00      	nop
 8003fb8:	e7fe      	b.n	8003fb8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003fba:	4b3e      	ldr	r3, [pc, #248]	; (80040b4 <xPortStartScheduler+0x120>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a3f      	ldr	r2, [pc, #252]	; (80040bc <xPortStartScheduler+0x128>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d10a      	bne.n	8003fda <xPortStartScheduler+0x46>
        __asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	60fb      	str	r3, [r7, #12]
    }
 8003fd6:	bf00      	nop
 8003fd8:	e7fe      	b.n	8003fd8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003fda:	4b39      	ldr	r3, [pc, #228]	; (80040c0 <xPortStartScheduler+0x12c>)
 8003fdc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	22ff      	movs	r2, #255	; 0xff
 8003fea:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ff4:	78fb      	ldrb	r3, [r7, #3]
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	4b31      	ldr	r3, [pc, #196]	; (80040c4 <xPortStartScheduler+0x130>)
 8004000:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004002:	4b31      	ldr	r3, [pc, #196]	; (80040c8 <xPortStartScheduler+0x134>)
 8004004:	2207      	movs	r2, #7
 8004006:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004008:	e009      	b.n	800401e <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800400a:	4b2f      	ldr	r3, [pc, #188]	; (80040c8 <xPortStartScheduler+0x134>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3b01      	subs	r3, #1
 8004010:	4a2d      	ldr	r2, [pc, #180]	; (80040c8 <xPortStartScheduler+0x134>)
 8004012:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004014:	78fb      	ldrb	r3, [r7, #3]
 8004016:	b2db      	uxtb	r3, r3
 8004018:	005b      	lsls	r3, r3, #1
 800401a:	b2db      	uxtb	r3, r3
 800401c:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800401e:	78fb      	ldrb	r3, [r7, #3]
 8004020:	b2db      	uxtb	r3, r3
 8004022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004026:	2b80      	cmp	r3, #128	; 0x80
 8004028:	d0ef      	beq.n	800400a <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800402a:	4b27      	ldr	r3, [pc, #156]	; (80040c8 <xPortStartScheduler+0x134>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f1c3 0307 	rsb	r3, r3, #7
 8004032:	2b04      	cmp	r3, #4
 8004034:	d00a      	beq.n	800404c <xPortStartScheduler+0xb8>
        __asm volatile
 8004036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	60bb      	str	r3, [r7, #8]
    }
 8004048:	bf00      	nop
 800404a:	e7fe      	b.n	800404a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800404c:	4b1e      	ldr	r3, [pc, #120]	; (80040c8 <xPortStartScheduler+0x134>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	021b      	lsls	r3, r3, #8
 8004052:	4a1d      	ldr	r2, [pc, #116]	; (80040c8 <xPortStartScheduler+0x134>)
 8004054:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004056:	4b1c      	ldr	r3, [pc, #112]	; (80040c8 <xPortStartScheduler+0x134>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800405e:	4a1a      	ldr	r2, [pc, #104]	; (80040c8 <xPortStartScheduler+0x134>)
 8004060:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	b2da      	uxtb	r2, r3
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800406a:	4b18      	ldr	r3, [pc, #96]	; (80040cc <xPortStartScheduler+0x138>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a17      	ldr	r2, [pc, #92]	; (80040cc <xPortStartScheduler+0x138>)
 8004070:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004074:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004076:	4b15      	ldr	r3, [pc, #84]	; (80040cc <xPortStartScheduler+0x138>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a14      	ldr	r2, [pc, #80]	; (80040cc <xPortStartScheduler+0x138>)
 800407c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004080:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004082:	f000 f8db 	bl	800423c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004086:	4b12      	ldr	r3, [pc, #72]	; (80040d0 <xPortStartScheduler+0x13c>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800408c:	f000 f8fa 	bl	8004284 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004090:	4b10      	ldr	r3, [pc, #64]	; (80040d4 <xPortStartScheduler+0x140>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a0f      	ldr	r2, [pc, #60]	; (80040d4 <xPortStartScheduler+0x140>)
 8004096:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800409a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800409c:	f7ff ff64 	bl	8003f68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80040a0:	f7ff f894 	bl	80031cc <vTaskSwitchContext>
    prvTaskExitError();
 80040a4:	f7ff ff1e 	bl	8003ee4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	e000ed00 	.word	0xe000ed00
 80040b8:	410fc271 	.word	0x410fc271
 80040bc:	410fc270 	.word	0x410fc270
 80040c0:	e000e400 	.word	0xe000e400
 80040c4:	200001fc 	.word	0x200001fc
 80040c8:	20000200 	.word	0x20000200
 80040cc:	e000ed20 	.word	0xe000ed20
 80040d0:	20000010 	.word	0x20000010
 80040d4:	e000ef34 	.word	0xe000ef34

080040d8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
        __asm volatile
 80040de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e2:	f383 8811 	msr	BASEPRI, r3
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	f3bf 8f4f 	dsb	sy
 80040ee:	607b      	str	r3, [r7, #4]
    }
 80040f0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80040f2:	4b0f      	ldr	r3, [pc, #60]	; (8004130 <vPortEnterCritical+0x58>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3301      	adds	r3, #1
 80040f8:	4a0d      	ldr	r2, [pc, #52]	; (8004130 <vPortEnterCritical+0x58>)
 80040fa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80040fc:	4b0c      	ldr	r3, [pc, #48]	; (8004130 <vPortEnterCritical+0x58>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d10f      	bne.n	8004124 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004104:	4b0b      	ldr	r3, [pc, #44]	; (8004134 <vPortEnterCritical+0x5c>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	b2db      	uxtb	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <vPortEnterCritical+0x4c>
        __asm volatile
 800410e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004112:	f383 8811 	msr	BASEPRI, r3
 8004116:	f3bf 8f6f 	isb	sy
 800411a:	f3bf 8f4f 	dsb	sy
 800411e:	603b      	str	r3, [r7, #0]
    }
 8004120:	bf00      	nop
 8004122:	e7fe      	b.n	8004122 <vPortEnterCritical+0x4a>
    }
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	20000010 	.word	0x20000010
 8004134:	e000ed04 	.word	0xe000ed04

08004138 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800413e:	4b12      	ldr	r3, [pc, #72]	; (8004188 <vPortExitCritical+0x50>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10a      	bne.n	800415c <vPortExitCritical+0x24>
        __asm volatile
 8004146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	607b      	str	r3, [r7, #4]
    }
 8004158:	bf00      	nop
 800415a:	e7fe      	b.n	800415a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800415c:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <vPortExitCritical+0x50>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3b01      	subs	r3, #1
 8004162:	4a09      	ldr	r2, [pc, #36]	; (8004188 <vPortExitCritical+0x50>)
 8004164:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004166:	4b08      	ldr	r3, [pc, #32]	; (8004188 <vPortExitCritical+0x50>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d105      	bne.n	800417a <vPortExitCritical+0x42>
 800416e:	2300      	movs	r3, #0
 8004170:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	f383 8811 	msr	BASEPRI, r3
    }
 8004178:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800417a:	bf00      	nop
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
 8004186:	bf00      	nop
 8004188:	20000010 	.word	0x20000010
 800418c:	00000000 	.word	0x00000000

08004190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004190:	f3ef 8009 	mrs	r0, PSP
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	4b15      	ldr	r3, [pc, #84]	; (80041f0 <pxCurrentTCBConst>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	f01e 0f10 	tst.w	lr, #16
 80041a0:	bf08      	it	eq
 80041a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80041a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041aa:	6010      	str	r0, [r2, #0]
 80041ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80041b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80041b4:	f380 8811 	msr	BASEPRI, r0
 80041b8:	f3bf 8f4f 	dsb	sy
 80041bc:	f3bf 8f6f 	isb	sy
 80041c0:	f7ff f804 	bl	80031cc <vTaskSwitchContext>
 80041c4:	f04f 0000 	mov.w	r0, #0
 80041c8:	f380 8811 	msr	BASEPRI, r0
 80041cc:	bc09      	pop	{r0, r3}
 80041ce:	6819      	ldr	r1, [r3, #0]
 80041d0:	6808      	ldr	r0, [r1, #0]
 80041d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d6:	f01e 0f10 	tst.w	lr, #16
 80041da:	bf08      	it	eq
 80041dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80041e0:	f380 8809 	msr	PSP, r0
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	f3af 8000 	nop.w

080041f0 <pxCurrentTCBConst>:
 80041f0:	200000bc 	.word	0x200000bc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop

080041f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
        __asm volatile
 80041fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	607b      	str	r3, [r7, #4]
    }
 8004210:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004212:	f7fe ff23 	bl	800305c <xTaskIncrementTick>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800421c:	4b06      	ldr	r3, [pc, #24]	; (8004238 <SysTick_Handler+0x40>)
 800421e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	2300      	movs	r3, #0
 8004226:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	f383 8811 	msr	BASEPRI, r3
    }
 800422e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004230:	bf00      	nop
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	e000ed04 	.word	0xe000ed04

0800423c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004240:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <vPortSetupTimerInterrupt+0x34>)
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004246:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <vPortSetupTimerInterrupt+0x38>)
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800424c:	4b0a      	ldr	r3, [pc, #40]	; (8004278 <vPortSetupTimerInterrupt+0x3c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4a0a      	ldr	r2, [pc, #40]	; (800427c <vPortSetupTimerInterrupt+0x40>)
 8004252:	fba2 2303 	umull	r2, r3, r2, r3
 8004256:	099b      	lsrs	r3, r3, #6
 8004258:	4a09      	ldr	r2, [pc, #36]	; (8004280 <vPortSetupTimerInterrupt+0x44>)
 800425a:	3b01      	subs	r3, #1
 800425c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800425e:	4b04      	ldr	r3, [pc, #16]	; (8004270 <vPortSetupTimerInterrupt+0x34>)
 8004260:	2207      	movs	r2, #7
 8004262:	601a      	str	r2, [r3, #0]
}
 8004264:	bf00      	nop
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	e000e010 	.word	0xe000e010
 8004274:	e000e018 	.word	0xe000e018
 8004278:	20000000 	.word	0x20000000
 800427c:	10624dd3 	.word	0x10624dd3
 8004280:	e000e014 	.word	0xe000e014

08004284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004284:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004294 <vPortEnableVFP+0x10>
 8004288:	6801      	ldr	r1, [r0, #0]
 800428a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800428e:	6001      	str	r1, [r0, #0]
 8004290:	4770      	bx	lr
 8004292:	0000      	.short	0x0000
 8004294:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004298:	bf00      	nop
 800429a:	bf00      	nop

0800429c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80042a2:	f3ef 8305 	mrs	r3, IPSR
 80042a6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2b0f      	cmp	r3, #15
 80042ac:	d914      	bls.n	80042d8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80042ae:	4a17      	ldr	r2, [pc, #92]	; (800430c <vPortValidateInterruptPriority+0x70>)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4413      	add	r3, r2
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80042b8:	4b15      	ldr	r3, [pc, #84]	; (8004310 <vPortValidateInterruptPriority+0x74>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	7afa      	ldrb	r2, [r7, #11]
 80042be:	429a      	cmp	r2, r3
 80042c0:	d20a      	bcs.n	80042d8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
 80042d2:	607b      	str	r3, [r7, #4]
    }
 80042d4:	bf00      	nop
 80042d6:	e7fe      	b.n	80042d6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80042d8:	4b0e      	ldr	r3, [pc, #56]	; (8004314 <vPortValidateInterruptPriority+0x78>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042e0:	4b0d      	ldr	r3, [pc, #52]	; (8004318 <vPortValidateInterruptPriority+0x7c>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d90a      	bls.n	80042fe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	603b      	str	r3, [r7, #0]
    }
 80042fa:	bf00      	nop
 80042fc:	e7fe      	b.n	80042fc <vPortValidateInterruptPriority+0x60>
    }
 80042fe:	bf00      	nop
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
 800430a:	bf00      	nop
 800430c:	e000e3f0 	.word	0xe000e3f0
 8004310:	200001fc 	.word	0x200001fc
 8004314:	e000ed0c 	.word	0xe000ed0c
 8004318:	20000200 	.word	0x20000200

0800431c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b08a      	sub	sp, #40	; 0x28
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004324:	2300      	movs	r3, #0
 8004326:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8004328:	f7fe fdde 	bl	8002ee8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800432c:	4b65      	ldr	r3, [pc, #404]	; (80044c4 <pvPortMalloc+0x1a8>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004334:	f000 f934 	bl	80045a0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004338:	4b63      	ldr	r3, [pc, #396]	; (80044c8 <pvPortMalloc+0x1ac>)
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4013      	ands	r3, r2
 8004340:	2b00      	cmp	r3, #0
 8004342:	f040 80a7 	bne.w	8004494 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d02d      	beq.n	80043a8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800434c:	2208      	movs	r2, #8
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	429a      	cmp	r2, r3
 8004356:	d227      	bcs.n	80043a8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004358:	2208      	movs	r2, #8
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4413      	add	r3, r2
 800435e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f003 0307 	and.w	r3, r3, #7
 8004366:	2b00      	cmp	r3, #0
 8004368:	d021      	beq.n	80043ae <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f023 0307 	bic.w	r3, r3, #7
 8004370:	3308      	adds	r3, #8
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	429a      	cmp	r2, r3
 8004376:	d214      	bcs.n	80043a2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f023 0307 	bic.w	r3, r3, #7
 800437e:	3308      	adds	r3, #8
 8004380:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	2b00      	cmp	r3, #0
 800438a:	d010      	beq.n	80043ae <pvPortMalloc+0x92>
        __asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	617b      	str	r3, [r7, #20]
    }
 800439e:	bf00      	nop
 80043a0:	e7fe      	b.n	80043a0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80043a2:	2300      	movs	r3, #0
 80043a4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043a6:	e002      	b.n	80043ae <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80043a8:	2300      	movs	r3, #0
 80043aa:	607b      	str	r3, [r7, #4]
 80043ac:	e000      	b.n	80043b0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043ae:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d06e      	beq.n	8004494 <pvPortMalloc+0x178>
 80043b6:	4b45      	ldr	r3, [pc, #276]	; (80044cc <pvPortMalloc+0x1b0>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d869      	bhi.n	8004494 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80043c0:	4b43      	ldr	r3, [pc, #268]	; (80044d0 <pvPortMalloc+0x1b4>)
 80043c2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80043c4:	4b42      	ldr	r3, [pc, #264]	; (80044d0 <pvPortMalloc+0x1b4>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043ca:	e004      	b.n	80043d6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d903      	bls.n	80043e8 <pvPortMalloc+0xcc>
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1f1      	bne.n	80043cc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80043e8:	4b36      	ldr	r3, [pc, #216]	; (80044c4 <pvPortMalloc+0x1a8>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d050      	beq.n	8004494 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2208      	movs	r2, #8
 80043f8:	4413      	add	r3, r2
 80043fa:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	685a      	ldr	r2, [r3, #4]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	1ad2      	subs	r2, r2, r3
 800440c:	2308      	movs	r3, #8
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	429a      	cmp	r2, r3
 8004412:	d91f      	bls.n	8004454 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4413      	add	r3, r2
 800441a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	f003 0307 	and.w	r3, r3, #7
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00a      	beq.n	800443c <pvPortMalloc+0x120>
        __asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	613b      	str	r3, [r7, #16]
    }
 8004438:	bf00      	nop
 800443a:	e7fe      	b.n	800443a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800443c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	1ad2      	subs	r2, r2, r3
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800444e:	69b8      	ldr	r0, [r7, #24]
 8004450:	f000 f908 	bl	8004664 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004454:	4b1d      	ldr	r3, [pc, #116]	; (80044cc <pvPortMalloc+0x1b0>)
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	4a1b      	ldr	r2, [pc, #108]	; (80044cc <pvPortMalloc+0x1b0>)
 8004460:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004462:	4b1a      	ldr	r3, [pc, #104]	; (80044cc <pvPortMalloc+0x1b0>)
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	4b1b      	ldr	r3, [pc, #108]	; (80044d4 <pvPortMalloc+0x1b8>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d203      	bcs.n	8004476 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800446e:	4b17      	ldr	r3, [pc, #92]	; (80044cc <pvPortMalloc+0x1b0>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a18      	ldr	r2, [pc, #96]	; (80044d4 <pvPortMalloc+0x1b8>)
 8004474:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	4b13      	ldr	r3, [pc, #76]	; (80044c8 <pvPortMalloc+0x1ac>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	431a      	orrs	r2, r3
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	2200      	movs	r2, #0
 8004488:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800448a:	4b13      	ldr	r3, [pc, #76]	; (80044d8 <pvPortMalloc+0x1bc>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3301      	adds	r3, #1
 8004490:	4a11      	ldr	r2, [pc, #68]	; (80044d8 <pvPortMalloc+0x1bc>)
 8004492:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004494:	f7fe fd36 	bl	8002f04 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	f003 0307 	and.w	r3, r3, #7
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <pvPortMalloc+0x19c>
        __asm volatile
 80044a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a6:	f383 8811 	msr	BASEPRI, r3
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	60fb      	str	r3, [r7, #12]
    }
 80044b4:	bf00      	nop
 80044b6:	e7fe      	b.n	80044b6 <pvPortMalloc+0x19a>
    return pvReturn;
 80044b8:	69fb      	ldr	r3, [r7, #28]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3728      	adds	r7, #40	; 0x28
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20012e0c 	.word	0x20012e0c
 80044c8:	20012e20 	.word	0x20012e20
 80044cc:	20012e10 	.word	0x20012e10
 80044d0:	20012e04 	.word	0x20012e04
 80044d4:	20012e14 	.word	0x20012e14
 80044d8:	20012e18 	.word	0x20012e18

080044dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d04d      	beq.n	800458a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80044ee:	2308      	movs	r3, #8
 80044f0:	425b      	negs	r3, r3
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4413      	add	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	4b24      	ldr	r3, [pc, #144]	; (8004594 <vPortFree+0xb8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4013      	ands	r3, r2
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10a      	bne.n	8004520 <vPortFree+0x44>
        __asm volatile
 800450a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800450e:	f383 8811 	msr	BASEPRI, r3
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	60fb      	str	r3, [r7, #12]
    }
 800451c:	bf00      	nop
 800451e:	e7fe      	b.n	800451e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d00a      	beq.n	800453e <vPortFree+0x62>
        __asm volatile
 8004528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452c:	f383 8811 	msr	BASEPRI, r3
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	f3bf 8f4f 	dsb	sy
 8004538:	60bb      	str	r3, [r7, #8]
    }
 800453a:	bf00      	nop
 800453c:	e7fe      	b.n	800453c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	685a      	ldr	r2, [r3, #4]
 8004542:	4b14      	ldr	r3, [pc, #80]	; (8004594 <vPortFree+0xb8>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4013      	ands	r3, r2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01e      	beq.n	800458a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d11a      	bne.n	800458a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	685a      	ldr	r2, [r3, #4]
 8004558:	4b0e      	ldr	r3, [pc, #56]	; (8004594 <vPortFree+0xb8>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	43db      	mvns	r3, r3
 800455e:	401a      	ands	r2, r3
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004564:	f7fe fcc0 	bl	8002ee8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	4b0a      	ldr	r3, [pc, #40]	; (8004598 <vPortFree+0xbc>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4413      	add	r3, r2
 8004572:	4a09      	ldr	r2, [pc, #36]	; (8004598 <vPortFree+0xbc>)
 8004574:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004576:	6938      	ldr	r0, [r7, #16]
 8004578:	f000 f874 	bl	8004664 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800457c:	4b07      	ldr	r3, [pc, #28]	; (800459c <vPortFree+0xc0>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3301      	adds	r3, #1
 8004582:	4a06      	ldr	r2, [pc, #24]	; (800459c <vPortFree+0xc0>)
 8004584:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004586:	f7fe fcbd 	bl	8002f04 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800458a:	bf00      	nop
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	20012e20 	.word	0x20012e20
 8004598:	20012e10 	.word	0x20012e10
 800459c:	20012e1c 	.word	0x20012e1c

080045a0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80045a6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80045aa:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80045ac:	4b27      	ldr	r3, [pc, #156]	; (800464c <prvHeapInit+0xac>)
 80045ae:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00c      	beq.n	80045d4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	3307      	adds	r3, #7
 80045be:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f023 0307 	bic.w	r3, r3, #7
 80045c6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80045c8:	68ba      	ldr	r2, [r7, #8]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	1ad3      	subs	r3, r2, r3
 80045ce:	4a1f      	ldr	r2, [pc, #124]	; (800464c <prvHeapInit+0xac>)
 80045d0:	4413      	add	r3, r2
 80045d2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045d8:	4a1d      	ldr	r2, [pc, #116]	; (8004650 <prvHeapInit+0xb0>)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80045de:	4b1c      	ldr	r3, [pc, #112]	; (8004650 <prvHeapInit+0xb0>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	4413      	add	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80045ec:	2208      	movs	r2, #8
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	1a9b      	subs	r3, r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0307 	bic.w	r3, r3, #7
 80045fa:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	4a15      	ldr	r2, [pc, #84]	; (8004654 <prvHeapInit+0xb4>)
 8004600:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004602:	4b14      	ldr	r3, [pc, #80]	; (8004654 <prvHeapInit+0xb4>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2200      	movs	r2, #0
 8004608:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800460a:	4b12      	ldr	r3, [pc, #72]	; (8004654 <prvHeapInit+0xb4>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	2200      	movs	r2, #0
 8004610:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	1ad2      	subs	r2, r2, r3
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004620:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <prvHeapInit+0xb4>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	4a0a      	ldr	r2, [pc, #40]	; (8004658 <prvHeapInit+0xb8>)
 800462e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	4a09      	ldr	r2, [pc, #36]	; (800465c <prvHeapInit+0xbc>)
 8004636:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004638:	4b09      	ldr	r3, [pc, #36]	; (8004660 <prvHeapInit+0xc0>)
 800463a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800463e:	601a      	str	r2, [r3, #0]
}
 8004640:	bf00      	nop
 8004642:	3714      	adds	r7, #20
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr
 800464c:	20000204 	.word	0x20000204
 8004650:	20012e04 	.word	0x20012e04
 8004654:	20012e0c 	.word	0x20012e0c
 8004658:	20012e14 	.word	0x20012e14
 800465c:	20012e10 	.word	0x20012e10
 8004660:	20012e20 	.word	0x20012e20

08004664 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800466c:	4b28      	ldr	r3, [pc, #160]	; (8004710 <prvInsertBlockIntoFreeList+0xac>)
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	e002      	b.n	8004678 <prvInsertBlockIntoFreeList+0x14>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	429a      	cmp	r2, r3
 8004680:	d8f7      	bhi.n	8004672 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	68ba      	ldr	r2, [r7, #8]
 800468c:	4413      	add	r3, r2
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	429a      	cmp	r2, r3
 8004692:	d108      	bne.n	80046a6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	441a      	add	r2, r3
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	441a      	add	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d118      	bne.n	80046ec <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	4b15      	ldr	r3, [pc, #84]	; (8004714 <prvInsertBlockIntoFreeList+0xb0>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d00d      	beq.n	80046e2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	441a      	add	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	601a      	str	r2, [r3, #0]
 80046e0:	e008      	b.n	80046f4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046e2:	4b0c      	ldr	r3, [pc, #48]	; (8004714 <prvInsertBlockIntoFreeList+0xb0>)
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	601a      	str	r2, [r3, #0]
 80046ea:	e003      	b.n	80046f4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d002      	beq.n	8004702 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004702:	bf00      	nop
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	20012e04 	.word	0x20012e04
 8004714:	20012e0c 	.word	0x20012e0c

08004718 <__libc_init_array>:
 8004718:	b570      	push	{r4, r5, r6, lr}
 800471a:	4d0d      	ldr	r5, [pc, #52]	; (8004750 <__libc_init_array+0x38>)
 800471c:	4c0d      	ldr	r4, [pc, #52]	; (8004754 <__libc_init_array+0x3c>)
 800471e:	1b64      	subs	r4, r4, r5
 8004720:	10a4      	asrs	r4, r4, #2
 8004722:	2600      	movs	r6, #0
 8004724:	42a6      	cmp	r6, r4
 8004726:	d109      	bne.n	800473c <__libc_init_array+0x24>
 8004728:	4d0b      	ldr	r5, [pc, #44]	; (8004758 <__libc_init_array+0x40>)
 800472a:	4c0c      	ldr	r4, [pc, #48]	; (800475c <__libc_init_array+0x44>)
 800472c:	f000 f82e 	bl	800478c <_init>
 8004730:	1b64      	subs	r4, r4, r5
 8004732:	10a4      	asrs	r4, r4, #2
 8004734:	2600      	movs	r6, #0
 8004736:	42a6      	cmp	r6, r4
 8004738:	d105      	bne.n	8004746 <__libc_init_array+0x2e>
 800473a:	bd70      	pop	{r4, r5, r6, pc}
 800473c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004740:	4798      	blx	r3
 8004742:	3601      	adds	r6, #1
 8004744:	e7ee      	b.n	8004724 <__libc_init_array+0xc>
 8004746:	f855 3b04 	ldr.w	r3, [r5], #4
 800474a:	4798      	blx	r3
 800474c:	3601      	adds	r6, #1
 800474e:	e7f2      	b.n	8004736 <__libc_init_array+0x1e>
 8004750:	08004814 	.word	0x08004814
 8004754:	08004814 	.word	0x08004814
 8004758:	08004814 	.word	0x08004814
 800475c:	08004818 	.word	0x08004818

08004760 <memcpy>:
 8004760:	440a      	add	r2, r1
 8004762:	4291      	cmp	r1, r2
 8004764:	f100 33ff 	add.w	r3, r0, #4294967295
 8004768:	d100      	bne.n	800476c <memcpy+0xc>
 800476a:	4770      	bx	lr
 800476c:	b510      	push	{r4, lr}
 800476e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004772:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004776:	4291      	cmp	r1, r2
 8004778:	d1f9      	bne.n	800476e <memcpy+0xe>
 800477a:	bd10      	pop	{r4, pc}

0800477c <memset>:
 800477c:	4402      	add	r2, r0
 800477e:	4603      	mov	r3, r0
 8004780:	4293      	cmp	r3, r2
 8004782:	d100      	bne.n	8004786 <memset+0xa>
 8004784:	4770      	bx	lr
 8004786:	f803 1b01 	strb.w	r1, [r3], #1
 800478a:	e7f9      	b.n	8004780 <memset+0x4>

0800478c <_init>:
 800478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800478e:	bf00      	nop
 8004790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004792:	bc08      	pop	{r3}
 8004794:	469e      	mov	lr, r3
 8004796:	4770      	bx	lr

08004798 <_fini>:
 8004798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479a:	bf00      	nop
 800479c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479e:	bc08      	pop	{r3}
 80047a0:	469e      	mov	lr, r3
 80047a2:	4770      	bx	lr
